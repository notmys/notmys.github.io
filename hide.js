const encoded = "--[[
$ilence.Wtf 2025 V1.0.1
    discord.gg/djMQRCNAAZ
]]

---------------------- $ilence.Wtf Loading Screen Module 2025 ----------------------
--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://pastebin.com/raw/iL0F4UWD'))()
--LoadingScreen Module
task.wait()

---------------------- $ilence.Wtf Console Disconnection 2025 ----------------------
--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/CnslDsnct.lua'))()
--Console Disconnection Module
task.wait()

---------------------- $ilence.Wtf Executor Functions 2025 ----------------------

--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/ExecFunc.lua'))()
--Executor Functions Module
task.wait()

---------------------- $ilence.Wtf Launch Logger 2025 ----------------------

--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/LnchLog.lua'))()
--Launch Logger Module
task.wait()

---------------------- $ilence.Wtf Anti Chat Logger 2025 ----------------------

--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/AntiChtLog.lua'))()
--Anti Chat Logger Module
task.wait()

---------------------- $ilence.Wtf Anti Voice Chat Logger 2025 ----------------------

--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/AntiVcLog.lua'))()
--Anti Voice Chat Logger Module
task.wait()

---------------------- $ilence.Wtf Notification Library 2025 ----------------------

--.gg/djMQRCNAAZ

local NotificationLib = {}

local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")


local screenGui = CoreGui:FindFirstChild("NotificationUI")
if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NotificationUI"
    screenGui.IgnoreGuiInset = true
	screenGui.DisplayOrder = 9999
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = CoreGui
end

local container = screenGui:FindFirstChild("NotificationContainer")
if not container then
    container = Instance.new("Frame")
    container.AnchorPoint = Vector2.new(1, 1)
    container.Position = UDim2.new(1, -20, 1, -20)
    container.Size = UDim2.new(0, 350, 1, -40)
    container.BackgroundTransparency = 1
    container.Name = "NotificationContainer"
    container.Parent = screenGui

    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 10)
    layout.VerticalAlignment = Enum.VerticalAlignment.Bottom
    layout.Parent = container
end

local notificationCount = 0

local function fadeAndFoldOut(instance, duration)
    for _, obj in ipairs(instance:GetDescendants()) do
        if obj:IsA("TextLabel") or obj:IsA("TextButton") then
            TweenService:Create(obj, TweenInfo.new(duration), {TextTransparency = 1, BackgroundTransparency = 1}):Play()
        elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
            TweenService:Create(obj, TweenInfo.new(duration), {ImageTransparency = 1}):Play()
        elseif obj:IsA("Frame") then
            TweenService:Create(obj, TweenInfo.new(duration), {BackgroundTransparency = 1}):Play()
        end
    end

    TweenService:Create(instance, TweenInfo.new(duration), {
        Size = UDim2.new(1, 0, 0, 0),
    }):Play()

    TweenService:Create(instance, TweenInfo.new(duration), {
        Position = instance.Position + UDim2.new(0, 0, 0, -10),
    }):Play()
end

function NotificationLib.Notify(options)
    local Title = options.Title or "Notification"
    local Content = options.Content or ""
    local Duration = options.Duration or 5

    local ShowButton1 = options.Button1 or false
    local Button1Text = options.Button1Text or "OK"
    local Button1Callback = options.Button1Callback or function() end

    local ShowButton2 = options.Button2 or false
    local Button2Text = options.Button2Text or "Cancel"
    local Button2Callback = options.Button2Callback or function() end

    local hasButtons = ShowButton1 or ShowButton2
    local fullHeight = hasButtons and 130 or 90

    
    task.spawn(function()
        local SoundService = game:GetService("SoundService")
        local Players = game:GetService("Players")

        local introUrl = "https://github.com/notmys/main/raw/refs/heads/main/intro/notification.mp3"
        local introFolder = "noti_mys"
        local introFileName = "notification.mp3"
        local introFilePath = introFolder .. "/" .. introFileName

        local function fileExists(path)
            return pcall(function()
                readfile(path)
            end)
        end

        local function ensureFolder()
            if not isfolder(introFolder) then
                makefolder(introFolder)
            end
        end

        local function fetchAndSaveIntro()
            ensureFolder()
            local success, data = pcall(function()
                return game:HttpGet(introUrl)
            end)

            if success and data then
                writefile(introFilePath, data)
                return true
            else
                warn("Failed to fetch intro audio: " .. (data or "Unknown error"))
                return false
            end
        end

        if not fileExists(introFilePath) then
            local ok = fetchAndSaveIntro()
            if not ok then return end
        end

        local success, assetPath = pcall(function()
            return getcustomasset(introFilePath)
        end)

        if not success then
            warn("Failed to create custom asset from path: " .. introFilePath)
            return
        end

        local sound = Instance.new("Sound")
        sound.SoundId = assetPath
        sound.Volume = 0.1
        sound.Name = "NotificationSound"

        local player = Players.LocalPlayer
        local playerGui = player:FindFirstChild("PlayerGui")
        if not playerGui then return end

        local gui = playerGui:FindFirstChild("NotificationSoundGui")
        if not gui then
            gui = Instance.new("ScreenGui")
            gui.Name = "NotificationSoundGui"
            gui.ResetOnSpawn = false
            gui.Parent = playerGui
        end

        sound.Parent = gui

        local ok, err = pcall(function()
            SoundService:PlayLocalSound(sound)
        end)

        if not ok then
            warn("Sound playback error: " .. err)
        end

        sound.Ended:Connect(function()
            sound:Destroy()
        end)
    end)

    notificationCount = notificationCount + 1

    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(1, 0, 0, 0)
    notif.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    notif.BorderSizePixel = 0
    notif.BackgroundTransparency = 0.4
    notif.ClipsDescendants = true
    notif.LayoutOrder = -notificationCount
    notif.AnchorPoint = Vector2.new(0, 1)
    notif.Position = UDim2.new(0, 0, 1, 0)
    notif.Parent = container
    Instance.new("UICorner", notif).CornerRadius = UDim.new(0, 6)

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.Text = Title
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextTransparency = 1
    title.Parent = notif

    local content = Instance.new("TextLabel")
    content.Size = UDim2.new(1, -20, 0, 40)
    content.Position = UDim2.new(0, 10, 0, 35)
    content.BackgroundTransparency = 1
    content.Font = Enum.Font.Gotham
    content.Text = Content
    content.TextColor3 = Color3.fromRGB(200, 200, 200)
    content.TextSize = 14
    content.TextWrapped = true
    content.TextXAlignment = Enum.TextXAlignment.Left
    content.TextYAlignment = Enum.TextYAlignment.Top
    content.TextTransparency = 1
    content.Parent = notif

    if hasButtons then
        local buttonFrame = Instance.new("Frame")
        buttonFrame.Size = UDim2.new(1, -20, 0, 30)
        buttonFrame.Position = UDim2.new(0, 10, 1, -40)
        buttonFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.Parent = notif

        local buttonLayout = Instance.new("UIListLayout")
        buttonLayout.FillDirection = Enum.FillDirection.Horizontal
        buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
        buttonLayout.Padding = UDim.new(0, 10)
        buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
        buttonLayout.Parent = buttonFrame

        if ShowButton2 then
            local button2 = Instance.new("TextButton")
            button2.Size = UDim2.new(0, 100, 1, 0)
            button2.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
            button2.Text = Button2Text
            button2.Font = Enum.Font.GothamMedium
            button2.TextColor3 = Color3.new(1, 1, 1)
            button2.TextSize = 14
            button2.AutoButtonColor = false
            button2.TextTransparency = 1
            button2.BackgroundTransparency = 0
            button2.Parent = buttonFrame

            Instance.new("UICorner", button2).CornerRadius = UDim.new(0, 6)

            button2.MouseButton1Click:Connect(function()
                Button2Callback()
                fadeAndFoldOut(notif, 0.3)
                task.wait(0.35)
                notif:Destroy()
            end)
        end

        if ShowButton1 then
            local button1 = Instance.new("TextButton")
            button1.Size = UDim2.new(0, 100, 1, 0)
            button1.BackgroundColor3 = Color3.fromRGB(60, 120, 255)
            button1.Text = Button1Text
            button1.Font = Enum.Font.GothamMedium
            button1.TextColor3 = Color3.new(1, 1, 1)
            button1.TextSize = 14
            button1.AutoButtonColor = false
            button1.TextTransparency = 1
            button1.BackgroundTransparency = 0
            button1.Parent = buttonFrame

            Instance.new("UICorner", button1).CornerRadius = UDim.new(0, 6)

            button1.MouseButton1Click:Connect(function()
                Button1Callback()
                fadeAndFoldOut(notif, 0.3)
                task.wait(0.35)
                notif:Destroy()
            end)
        end
    end

    task.wait()
    TweenService:Create(notif, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {
        Size = UDim2.new(1, 0, 0, fullHeight),
    }):Play()

    for _, obj in ipairs(notif:GetDescendants()) do
        if obj:IsA("TextLabel") then
            TweenService:Create(obj, TweenInfo.new(0.4), {TextTransparency = 0}):Play()
        elseif obj:IsA("TextButton") then
            TweenService:Create(obj, TweenInfo.new(0.4), {TextTransparency = 0}):Play()
        end
    end

    if not hasButtons then
        task.delay(Duration, function()
            if notif and notif.Parent then
                fadeAndFoldOut(notif, 0.3)
                task.wait(0.35)
                notif:Destroy()
            end
        end)
    end
end

_G.NotificationLib = NotificationLib

task.wait()

--.gg/djMQRCNAAZ
loadstring(game:HttpGet('https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/chatmsg.lua'))()
--Loader Message Module
task.wait()

--[[ 
Made By $ilence
.gg/djMQRCNAAZ
]]

local function SilenceWTFtags()
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local CoreGui = game:GetService("CoreGui")

    local LocalPlayer = Players.LocalPlayer
    local showOwnTag = true

    local TagParent = (gethui and gethui())
        or (get_hidden_gui and get_hidden_gui())
        or (get_hidden_ui and get_hidden_ui())
        or CoreGui

    local function modifyString(str)
        return (str:gsub(" ", ""))
    end

    local defaultWhitelistMessages = {
        "$ilence.Wtf On Top()",
        "$ilence.Wtf Premium On Top()"
    }

    local WhitelistMessages = {}
    local WhitelistTagMap = {}
    local tagSettingWhitelistMessage

    local function initializeWL()
        WhitelistMessages = {
            tagSettingWhitelistMessage or defaultWhitelistMessages[1],
            "$ilence.Wtf Premium On Top()"
        }

        WhitelistTagMap = {
            [modifyString(tagSettingWhitelistMessage or "$ilence.Wtf On Top()")] = "$ilence.wtf User",
            [modifyString("$ilence.Wtf Premium On Top()")] = "$ilence.Premium User"
        }
    end

    initializeWL()

    local DEFAULT_RANK_NAME = "$ilence.wtf User"

    local UsernameRankMap = {
        ["01xMYS"] = "$ilence.Wtf Owner",
        ["Strixxsy"] = "$ilence.Wtf Owner",
        ["chulomeii"] = "$ilence.wtf Queen",
        ["e2edeq"] = "$ilence.Wtf \nCo Owner",
		["jtyrjetahtersjrt"] = "$ilence.Wtf \nCo Owner",
        ["Jemenzboy1090"] = "Nebula ☄️",
    }

    local RankColors = {
        ["$ilence.wtf User"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(255, 255, 255),
            textColor = Color3.fromRGB(255, 255, 255)
        },
        ["$ilence.Premium User"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(189, 232, 242),
            textColor = Color3.fromRGB(49, 169, 173)
        },
        ["$ilence.Wtf Owner"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(255, 255, 255),
            textColor = Color3.fromRGB(255, 0, 0)
        },
        ["$ilence.wtf Queen"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(255, 255, 255),
            textColor = Color3.fromRGB(252, 194, 255)
        },
        ["$ilence.Wtf \nCo Owner"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(255, 255, 255),
            textColor = Color3.fromRGB(155, 161, 2)
        },
        ["Nebula ☄️"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(255, 255, 255),
            textColor = Color3.fromRGB(82, 44, 153)
        },
        ["$ilence.Wtf Mod"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(120, 140, 255),
            textColor = Color3.fromRGB(255, 255, 255)
        },
        ["$ilence.Wtf Helper"] = {
            primary = Color3.fromRGB(0, 0, 0),
            accent = Color3.fromRGB(192, 209, 107),
            textColor = Color3.fromRGB(0, 0, 0)
        }
    }

    local CONFIG = {
        TAG_SIZE = UDim2.new(0, 120, 0, 40),
        TAG_OFFSET = Vector3.new(0, 2.4, 0),
        MAX_DISTANCE = 65
    }

    local ChatWhitelist = {}
    local playerTags = {}

    local api = {}

    function api.initializeWhitelist()
        initializeWL()
    end

    function api.WhitelistMessage(newMessage)
        if newMessage then
            tagSettingWhitelistMessage = newMessage
        end
        initializeWL()
    end

    function api.WhitelistRoleMap(newMap)
        if newMap then
            UsernameRankMap = newMap
        end
    end

    function api.WhitelistRoleColors(newColors)
        if newColors then
            RankColors = newColors
        end
    end

    function api.Configs(newConfig)
        if newConfig then
            CONFIG = newConfig
        end
    end

    function api.UpdateDefaultRankName(newDefault)
        if newDefault then
            DEFAULT_RANK_NAME = newDefault
        end
    end

    local function attachTagToHead(character, player, rankText)
        local head = character:FindFirstChild("Head")
        if not head then return end

        if head:FindFirstChild("RankTag") then
            head.RankTag:Destroy()
        end

        if player == LocalPlayer and not showOwnTag then
            return
        end

        local colors = RankColors[rankText]
        if not colors then
            warn("[RankTag] Invalid rankText: " .. tostring(rankText))
            return
        end

        local tag = Instance.new("BillboardGui")
        tag.Adornee = head
        tag.Name = "RankTag"
        tag.Size = CONFIG.TAG_SIZE
        tag.StudsOffset = CONFIG.TAG_OFFSET
        tag.AlwaysOnTop = true
        tag.MaxDistance = CONFIG.MAX_DISTANCE
        tag.Parent = TagParent

        local container = Instance.new("TextButton")
        container.Size = UDim2.new(1, 0, 1, 0)
        container.BackgroundTransparency = 0.2
        container.BackgroundColor3 = colors.primary
        container.BorderSizePixel = 0
        container.Text = ""
        container.ClipsDescendants = true
        container.Parent = tag

        Instance.new("UICorner", container).CornerRadius = UDim.new(0, 6)

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 0.6, 0)
		label.Position = UDim2.new(0, 0, 0.1, 0)
		label.BackgroundTransparency = 1
		label.Text = rankText
		label.TextColor3 = colors.textColor or Color3.new(1, 1, 1)
		label.TextSize = 17
		label.Font = Enum.Font.SourceSansBold
		label.Parent = container

        local userLabel = Instance.new("TextLabel")
        userLabel.Size = UDim2.new(1, 0, 0.4, 0)
        userLabel.Position = UDim2.new(0, 0, 0.6, 0)
        userLabel.BackgroundTransparency = 1
        userLabel.Text = "@" .. player.Name
        userLabel.TextColor3 = colors.accent
        userLabel.TextSize = 10
        userLabel.Font = Enum.Font.GothamBold
        userLabel.Parent = container

        playerTags[player] = tag
    end

    local function removeTag(player)
        if playerTags[player] then
            playerTags[player]:Destroy()
            playerTags[player] = nil
        end
    end

    local function createTag(player, rankText)
        if playerTags[player] then return end

        if player.Character then
            attachTagToHead(player.Character, player, rankText)
        end
        player.CharacterAdded:Connect(function(character)
            attachTagToHead(character, player, rankText)
        end)
    end

    local function setupChatListener(player)
        local nameLower = player.Name:lower()

        if UsernameRankMap[player.Name] then
            local role = UsernameRankMap[player.Name]
            ChatWhitelist[nameLower] = true
            createTag(player, role)
            warn("[❕$ilence.Wtf Nametags Api]: Whitelisted player @" .. player.DisplayName .. " joined! | Role: " .. role)
            return
        end

        player.Chatted:Connect(function(msg)
            local cleaned = modifyString(msg)
            local matchedTag = WhitelistTagMap[cleaned]

            if matchedTag and not ChatWhitelist[nameLower] then
                ChatWhitelist[nameLower] = true
                createTag(player, matchedTag)
            end
        end)
    end

    -- Constantly check and reapply tags for players in UsernameRankMap
    task.spawn(function()
        while true do
            for playerName, rank in pairs(UsernameRankMap) do
                local player = Players:FindFirstChild(playerName)
                if player then
                    if not playerTags[player] then
                        createTag(player, rank)
                    end
                end
            end
            task.wait(5)  -- Check every 5 seconds
        end
    end)

    for _, player in ipairs(Players:GetPlayers()) do
        task.spawn(function()
            setupChatListener(player)
        end)
    end

    Players.PlayerAdded:Connect(function(player)
        task.spawn(function()
            setupChatListener(player)
        end)
    end)

    LocalPlayer.CharacterAdded:Connect(function(character)
        local nameLower = LocalPlayer.Name:lower()
        if showOwnTag and ChatWhitelist[nameLower] then
            local role = UsernameRankMap[LocalPlayer.Name] or DEFAULT_RANK_NAME
            attachTagToHead(character, LocalPlayer, role)
        end
    end)

    function api.toggleOwnTag(value)
        showOwnTag = value
        if LocalPlayer then
            local nameLower = LocalPlayer.Name:lower()
            if showOwnTag and ChatWhitelist[nameLower] then
                local role = UsernameRankMap[LocalPlayer.Name] or DEFAULT_RANK_NAME
                createTag(LocalPlayer, role)
            else
                removeTag(LocalPlayer)
            end
        end
    end

    api.UsernameRankMap = UsernameRankMap
    api.RankColors = RankColors
    api.CONFIG = CONFIG

    return api
end

local rankTaggerModule = SilenceWTFtags()

-- Now can call, for example:
-- rankTaggerModule.WhitelistRoleMap({ ["NewUser"] = "VIP" })
-- rankTaggerModule.WhitelistRoleColors({ ["VIP"] = { primary = Color3.fromRGB(255, 215, 0), accent = Color3.fromRGB(255, 255, 255) } })
-- rankTaggerModule.toggleOwnTag(true)

rankTaggerModule.toggleOwnTag(true)

local function getExecutorName()
    if identifyexecutor then
        local success, name = pcall(identifyexecutor)
        if success and type(name) == "string" then
            return name
        end
    end
    return "Unknown Executor"
end

local executorName = getExecutorName()

NotificationLib.Notify({
    Title = "Action Required!",
    Content = "Do you want to clear your executor logs Console?",
    Button1 = true,
    Button1Text = "Yes",
    Button1Callback = function()
        if type(rconsoleclear) == "function" then
            rconsoleclear()
            NotificationLib.Notify({
                Title = "Console Cleared",
                Content = executorName .. " Logs Console was successfully cleared.",
                Duration = 6
            })
        else
            NotificationLib.Notify({
                Title = "Unable to Clear Console",
                Content = "Your executor does not support clearing the console.",
                Duration = 8
            })
        end
    end,
    Button2 = true,
    Button2Text = "No",
    Button2Callback = function()
        NotificationLib.Notify({
            Title = "Action Cancelled",
            Content = "Developer Console was not cleared.",
            Duration = 4
        })
    end
})


local SoundService = game:GetService("SoundService")
local Players = game:GetService("Players")

local introUrl = "https://github.com/notmys/main/raw/refs/heads/main/intro/utopia.voyage.mp3"
local introFolder = "sounds_utopia"
local introFileName = "utopia.voyage.mp3"  
local introFilePath = introFolder .. "/" .. introFileName

local function fileExists(path)
    return pcall(function()
        readfile(path)
    end)
end

local function ensureFolder()
    if not isfolder(introFolder) then
        makefolder(introFolder)
    end
end

local function fetchAndSaveIntro()
    ensureFolder()
    local success, data = pcall(function()
        return game:HttpGet(introUrl)
    end)

    if success and data then
        writefile(introFilePath, data)
        return true
    else
        warn("Failed to fetch intro audio: " .. (data or "Unknown error"))
        return false
    end
end

local function playIntroSound(screenGui)
    if not fileExists(introFilePath) then
        local ok = fetchAndSaveIntro()
        if not ok then return end
    end

    local success, assetPath = pcall(function()
        return getcustomasset(introFilePath)
    end)

    if not success then
        warn("Failed to create custom asset from path: " .. introFilePath)
        return
    end

    local sound = Instance.new("Sound")
    sound.SoundId = assetPath
    sound.Volume = 0.5
    sound.Name = "IntroSound"
    sound.Parent = screenGui

    local ok, err = pcall(function()
        SoundService:PlayLocalSound(sound)
    end)

    if not ok then
        warn("Sound playback error: " .. err)
    end

    sound.Ended:Connect(function()
        sound:Destroy()
    end)
end

local function initAndPlay()
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    local gui = Instance.new("ScreenGui")
    gui.Name = "SoundGui"
    gui.Parent = playerGui

    playIntroSound(gui)
end

initAndPlay()

-- pick CoreGui / hidden UI depending on executor
local core = (gethui and gethui()) or game:GetService("CoreGui")

local gui = Instance.new("ScreenGui")
gui.Name = "$ilence.wtf"
gui.DisplayOrder = 99999
gui.IgnoreGuiInset = true
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- executor protections (safe if not available)
pcall(function()
    if syn and syn.protect_gui then syn.protect_gui(gui) end
    if get_hidden_gui or get_hidden_ui then
        (get_hidden_gui or get_hidden_ui)(gui)
    end
end)

gui.Parent = core

local services = {
    'UserInputService', 'RunService', 'TweenService', 'CoreGui', 'StarterGui'
}

for _, serviceName in ipairs(services) do
    getgenv()[serviceName] = game:GetService(serviceName)
end

local useStudio = RunService:IsStudio()

local function loadWithTimeout(url)
    local success, result = pcall(function()
        return game:HttpGet(url, true)
    end)
    if success and result then
        local chunk = loadstring(result)
        if chunk then
            return chunk()
        end
    end
    warn("Failed to load icons from URL:", url)
    return {}
end

local Icons = useStudio
    and require(script.Parent.icons)
    or loadWithTimeout('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/icons.lua')

local function getIcon(name: string)
    if not Icons or not Icons['48px'] then
        warn("Lucide Icons: Icons library or 48px size not loaded")
        return nil
    end
    name = string.match(string.lower(name), "^%s*(.*)%s*$") or ""
    local sizedicons = Icons['48px']
    local r = sizedicons[name]
    if not r then
        warn("Lucide Icons: Failed to find icon by the name of '" .. name .. "'")
        return nil
    end
    local rirs = r[2]
    local riro = r[3]
    if type(r[1]) ~= "number" or type(rirs) ~= "table" or type(riro) ~= "table" then
        warn("Lucide Icons: Internal error: Invalid auto-generated asset entry")
        return nil
    end
    local irs = Vector2.new(rirs[1], rirs[2])
    local iro = Vector2.new(riro[1], riro[2])
    return {
        id = r[1],
        imageRectSize = irs,
        imageRectOffset = iro,
    }
end

local function getAssetUri(id)
    if type(id) == "number" then
        return "rbxassetid://" .. id
    else
        warn("Rayfield | The icon argument must be a numeric asset ID")
        return "rbxassetid://0"
    end
end

local function createIconButton(iconName, parent)
    local iconData = getIcon(iconName)
    if not iconData then
        warn("Cannot create icon button, icon not found: " .. tostring(iconName))
        return nil
    end
    local button = Instance.new("ImageButton")
    button.Size = UDim2.new(0, 20, 0, 20)
    button.BackgroundTransparency = 1
    button.Image = getAssetUri(iconData.id)
    button.ImageRectSize = iconData.imageRectSize
    button.ImageRectOffset = iconData.imageRectOffset
    button.Parent = parent
    button.ZIndex = parent.ZIndex + 1
    return button
end

NotificationLib.Notify({
    Title = "Action Required!",
    Content = "Allow Us To Access Your Clipboard?",
    Button1 = true,
    Button1Text = "Yes",
    Button1Callback = function()
        local clipboardContent = "[getclipboard not supported]\nResulting Fix!"
        if type(getclipboard) == "function" then
            local success, result = pcall(getclipboard)
            if success and type(result) == "string" then
                clipboardContent = result
            else
                clipboardContent = "[Failed to read clipboard]"
            end
        end

        NotificationLib.Notify({
            Title = "Clipboard Content",
            Content = "Clipboard contents:\n" .. clipboardContent,
            Duration = 5
        })
    end,
    Button2 = true,
    Button2Text = "No",
    Button2Callback = function()
        NotificationLib.Notify({
            Title = "Access Denied",
            Content = "You chose not to allow clipboard access.",
            Duration = 4
        })
    end
})

NotificationLib.Notify({
    Title = "Succesfully Launched!",
    Content = "$ilence.Wtf has been succesfully launched!",
    Duration = 6
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to get all friends
local function getAllFriends()
    local pages = Players:GetFriendsAsync()
    local allFriends = {}

    while true do
        for _, friend in ipairs(pages:GetCurrentPage()) do
            table.insert(allFriends, friend)
        end

        if pages.IsFinished then break end
        pages:AdvanceToNextPageAsync()
    end

    return allFriends
end

-- Run the function and filter who’s online
local success, result = pcall(getAllFriends)

if success then
    local online = {}

    for _, friend in ipairs(result) do
        if friend.IsOnline then
            table.insert(online, friend.Username)
        end
    end

    local content = ""
    if #online > 0 then
        content = "Online Friends:\n" .. table.concat(online, ", ")
    else
        content = "No friends are currently online."
    end

    -- Show in NotificationLib
    NotificationLib.Notify({
        Title = "Successfully Launched!",
        Content = content,
        Duration = 8
    })
else
    NotificationLib.Notify({
        Title = "Error",
        Content = "Failed to load friends list.",
        Duration = 5
    })
end

local frame = Instance.new("ScrollingFrame")
frame.Name = "$ilence.Wtf"
frame.Size = UDim2.new(0, 600, 0, 400)
frame.Position = UDim2.new(0.5, -300, 0.5, -200)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BorderSizePixel = 0
frame.BackgroundTransparency = 0
frame.ClipsDescendants = true
frame.ScrollBarThickness = 2
frame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
frame.ScrollBarImageTransparency = 0.2
frame.ScrollingDirection = Enum.ScrollingDirection.Y
frame.CanvasSize = UDim2.new(0, 0, 0, 1200)
frame.Parent = gui

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(255, 255, 255)
stroke.Thickness = 1
stroke.Transparency = 0.7
stroke.Parent = frame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 6)
corner.Parent = frame

local dragBar = Instance.new("Frame")
dragBar.Size = UDim2.new(0, 500, 0, 30)
dragBar.AnchorPoint = Vector2.new(0.5, 1)
dragBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
dragBar.BorderSizePixel = 0
dragBar.ZIndex = frame.ZIndex + 1
dragBar.Parent = gui

local Dcorner = Instance.new("UICorner")
Dcorner.CornerRadius = UDim.new(0, 4)
Dcorner.Parent = dragBar

local GAP = 5

local function updateDragBar()
    dragBar.Position = UDim2.new(
        frame.Position.X.Scale,
        frame.Position.X.Offset + frame.Size.X.Offset / 2,
        frame.Position.Y.Scale,
        frame.Position.Y.Offset - GAP
    )
end

updateDragBar()
RunService.RenderStepped:Connect(updateDragBar)

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(255, 255, 255)
stroke.Thickness = 1
stroke.Transparency = 0.7
stroke.Parent = dragBar

local dragBarCosmetic = Instance.new("Frame")
dragBarCosmetic.Size = UDim2.new(0, 100, 0, 4)
dragBarCosmetic.Position = UDim2.new(0.5, 0, 0.5, -2)
dragBarCosmetic.AnchorPoint = Vector2.new(0.5, 0.5)
dragBarCosmetic.BackgroundColor3 = Color3.fromRGB(96, 168, 226)
dragBarCosmetic.BackgroundTransparency = 1
dragBarCosmetic.BorderSizePixel = 0
dragBarCosmetic.Parent = dragBar

local dragBarCorner = Instance.new("UICorner")
dragBarCorner.CornerRadius = UDim.new(1, 0)
dragBarCorner.Parent = dragBarCosmetic

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 90, 0, 20)
titleLabel.Position = UDim2.new(0, 208, 0.5, 0)
titleLabel.AnchorPoint = Vector2.new(0, 0.5)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "silence.wtf"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 16
titleLabel.TextXAlignment = Enum.TextXAlignment.Center
titleLabel.ZIndex = dragBar.ZIndex + 1
titleLabel.Parent = dragBar

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 90, 0, 20)
titleLabel.Position = UDim2.new(0, 180, 0.55, 0)
titleLabel.AnchorPoint = Vector2.new(0, 0.5)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "v1.0.1"
titleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 13
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.ZIndex = dragBar.ZIndex + 1
titleLabel.Parent = dragBar

local dragging = false
local dragStart = nil
local startPos = nil
local targetPosition = nil
local currentPosition = nil

local function clampPosition(pos, frameSize, guiSize)

    local absX = pos.X.Scale * guiSize.X + pos.X.Offset
    local absY = pos.Y.Scale * guiSize.Y + pos.Y.Offset

    local clampedX = math.clamp(absX, 0, guiSize.X - frameSize.X)
    local clampedY = math.clamp(absY, 0, guiSize.Y - frameSize.Y)

    return UDim2.new(0, clampedX, 0, clampedY)
end

RunService.RenderStepped:Connect(function(dt)
    if targetPosition and currentPosition then
        currentPosition = currentPosition:Lerp(targetPosition, math.min(dt * 15, 1))
        frame.Position = currentPosition
    end
end)

dragBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        currentPosition = startPos
        targetPosition = startPos
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

dragBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )

        targetPosition = clampPosition(newPos, frame.AbsoluteSize, gui.AbsoluteSize)
    end
end)

local toggles = {}

local isMinimized = false

local minimizeButton = createIconButton("minus", dragBar)
if minimizeButton then
    minimizeButton.Position = UDim2.new(1, -35, 0.5, 0)
    minimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
    minimizeButton.ZIndex = dragBar.ZIndex + 1

    local clickSound = Instance.new("Sound")
    clickSound.SoundId = "rbxassetid://15675059323"
    clickSound.Volume = 0.3
    clickSound.Parent = minimizeButton
    minimizeButton.MouseButton1Click:Connect(function()

        clickSound:Play()
        isMinimized = not isMinimized
        frame.Visible = not isMinimized
    end)
end

local closeButton = createIconButton("x", dragBar)
if closeButton then
    closeButton.Position = UDim2.new(1, -15, 0.5, 0)
    closeButton.AnchorPoint = Vector2.new(0.5, 0.5)
    closeButton.ZIndex = dragBar.ZIndex + 1

    local clickSound = Instance.new("Sound")
    clickSound.SoundId = "rbxassetid://15675059323"
    clickSound.Volume = 0.3
    clickSound.Parent = closeButton
    closeButton.MouseButton1Click:Connect(function()
        clickSound:Play()

        for _, toggle in ipairs(toggles) do
            if toggle.options.CurrentValue then
                toggle.options.CurrentValue = false
                local knob = toggle.frame:FindFirstChild("Frame"):FindFirstChild("Frame")
                if knob then
                    TweenService:Create(knob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Position = UDim2.new(0, 2, 0.49, 0)
                    }):Play()
                end
                if typeof(toggle.options.Callback) == "function" then
                    toggle.options.Callback(false)
                end
            end
        end
        gui:Destroy()
    end)
end

local starHolder = Instance.new("Frame")
starHolder.Size = UDim2.new(1, 0, 1, 0)
starHolder.BackgroundTransparency = 1
starHolder.ZIndex = 1
starHolder.ClipsDescendants = true
starHolder.Parent = frame

coroutine.wrap(function()
    while true do
        local star = Instance.new("Frame")
        star.Size = UDim2.new(0, 2, 0, 2)
        star.Position = UDim2.new(math.random(), 0, 0, 0)
        star.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        star.BackgroundTransparency = 0.3
        star.BorderSizePixel = 0
        star.ZIndex = 1
        star.Parent = starHolder
        local fallTime = math.random(10, 20)
        local tween = TweenService:Create(star, TweenInfo.new(fallTime, Enum.EasingStyle.Linear), {
            Position = star.Position + UDim2.new(0, 0, 1, 0),
            BackgroundTransparency = 1
        })
        tween:Play()
        tween.Completed:Connect(function()
            star:Destroy()
        end)
        wait(0.05)
    end
end)()

local tabsFrame = Instance.new("Frame")
tabsFrame.Size = UDim2.new(1, 0, 0, 30)
tabsFrame.Position = UDim2.new(0, 0, 0, 10)
tabsFrame.BackgroundTransparency = 1
tabsFrame.Name = "TabsFrame"
tabsFrame.Parent = frame

local tabLayout = Instance.new("UIListLayout", tabsFrame)
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabLayout.Padding = UDim.new(0, 8)

local listContainer = Instance.new("Frame")
listContainer.Size = UDim2.new(1, -20, 1, -50)
listContainer.Position = UDim2.new(0, 10, 0, 40)
listContainer.BackgroundTransparency = 1
listContainer.Name = "ListContainer"
listContainer.Parent = frame

local uiList = Instance.new("UIListLayout", listContainer)
uiList.SortOrder = Enum.SortOrder.LayoutOrder
uiList.Padding = UDim.new(0, 8)

local tabPages = {}
local activeTab = nil

local function switchTab(tabName)
    for name, page in pairs(tabPages) do
        page.Visible = (name == tabName)
    end
    activeTab = tabName
end
---------------------
local tabIcons = {
    ["Home"] = "home",
    ["Player"] = "user",
	["Vc"] = "volume-2",
	["GameTab"] = "send-to-back",
    ["Locks/Aim"] = "plus",
    ["Esp's"] = "eye",
    ["Misc"] = "settings"
}
---------------------
local function createTab(tabName)
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(0, 30, 0, 30)
    tabButton.BackgroundTransparency = 0.9
    tabButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    tabButton.Text = ""
    tabButton.AutoButtonColor = false
    tabButton.ZIndex = 2
    tabButton.Parent = tabsFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = tabButton

    local hoverSound = Instance.new("Sound")
    hoverSound.SoundId = "rbxassetid://92876108656319"
    hoverSound.Volume = 0.1
    hoverSound.Name = "HoverSound"
    hoverSound.Parent = tabButton

    local clickSound = Instance.new("Sound")
    clickSound.SoundId = "rbxassetid://15675059323"
    clickSound.Volume = 0.2
    clickSound.Name = "ClickSound"
    clickSound.Parent = tabButton

    tabButton.MouseEnter:Connect(function()
        TweenService:Create(tabButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(200, 200, 200)
        }):Play()
        hoverSound:Play()
    end)

    tabButton.MouseLeave:Connect(function()
        TweenService:Create(tabButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        }):Play()
    end)

    local iconName = tabIcons[tabName] or "circle"
    local iconData = getIcon(iconName)
    if iconData then
        local iconLabel = Instance.new("ImageLabel")
        iconLabel.Size = UDim2.new(0, 20, 0, 20)
        iconLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
        iconLabel.AnchorPoint = Vector2.new(0.5, 0.5)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Image = getAssetUri(iconData.id)
        iconLabel.ImageRectSize = iconData.imageRectSize
        iconLabel.ImageRectOffset = iconData.imageRectOffset
        iconLabel.ZIndex = 3
        iconLabel.Parent = tabButton
    else
        warn("Failed to create icon for tab: " .. tabName .. " (Icon: " .. iconName .. ")")
    end

    local page = Instance.new("Frame")
    page.Name = tabName
    page.Visible = false
    page.Size = UDim2.new(1, -20, 1, -30)
    page.Position = UDim2.new(0, 10, 0, 10)
    page.BackgroundTransparency = 1
    page.ZIndex = 1
    page.Parent = listContainer

    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 8)
    layout.Parent = page

    tabPages[tabName] = page

    tabButton.MouseButton1Click:Connect(function()
        clickSound:Play()
        switchTab(tabName)
    end)

    if not activeTab then
        switchTab(tabName)
    end

    return page
end

local Tab = {}
function Tab:New(tabName)
    if not tabPages[tabName] then
        createTab(tabName)
    end
    return {
                CreateButton = function(_, options)
                    local currentPage = tabPages[tabName]
                    if not currentPage then return end

                    local button = Instance.new("TextButton")
                    button.Size = UDim2.new(1.03, 0, 0, 40)
                    button.BackgroundTransparency = 0.9
                    button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                    button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    button.Font = Enum.Font.Gotham
                    button.TextSize = 18
                    button.Text = options.Name or "New Button"
                    button.TextXAlignment = Enum.TextXAlignment.Center
                    button.AutoButtonColor = false
                    button.ZIndex = 2

                    local corner = Instance.new("UICorner", button)
                    corner.CornerRadius = UDim.new(0, 6)

                    local hoverSound = Instance.new("Sound", button)
                    hoverSound.SoundId = "rbxassetid://92876108656319"
                    hoverSound.Volume = 0.1

                    local clickSound = Instance.new("Sound", button)
                    clickSound.SoundId = "rbxassetid://15675059323"
                    clickSound.Volume = 0.3

                    button.MouseEnter:Connect(function()
                        TweenService:Create(button, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                        hoverSound:Play()
                    end)
                    button.MouseLeave:Connect(function()
                        TweenService:Create(button, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        }):Play()
                    end)
                    button.MouseButton1Click:Connect(function()
                        clickSound:Play()
                        if typeof(options.Callback) == "function" then
                            options.Callback()
                        end
                    end)
                    button.Parent = currentPage
                    return button
                end,

                CreateLabel = function(_, options)
                    local currentPage = tabPages[tabName]
                    if not currentPage then return end

				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1.03, 0, 0, 40)
				label.Position = UDim2.new(0, 0, 0, 0)
				label.BackgroundTransparency = 1
				label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				label.TextColor3 = Color3.fromRGB(255, 255, 255)
				label.Font = Enum.Font.Nunito
				label.TextSize = 20
				label.TextTransparency = 0.4
				label.Text = options.Name or "New Label"
				label.TextXAlignment = Enum.TextXAlignment.Left
				label.ZIndex = 2

				local corner = Instance.new("UICorner", label)
				corner.CornerRadius = UDim.new(0, 6)

				label.Parent = currentPage
				return label
			end,

CreateDropdown = function(_, DropdownSettings)
    local currentPage = tabPages[tabName]
    if not currentPage then return end

    -- Animation settings
    local AnimationSettings = {
        FadeDuration = 0.3, -- Duration for options' fade in/out
        FadeDelayIncrement = 0.1, -- Unused (kept for compatibility)
        ExpandDuration = 0.1, -- Duration for dropdown expand/shrink
        ToggleRotationDuration = 0.4, -- Duration for toggle icon rotation
        SelectionTransitionDuration = 0.2 -- Duration for option selection highlight
    }

    local TweenService = game:GetService("TweenService")

    local Dropdown = Instance.new("Frame")
    Dropdown.Name = DropdownSettings.Name or "Dropdown"
    Dropdown.Size = UDim2.new(1.03, -10, 0, 45)
    Dropdown.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Dropdown.BackgroundTransparency = 1
    Dropdown.BorderSizePixel = 0
    Dropdown.Parent = currentPage
    local success, err = pcall(function() Dropdown.ZIndex = 2 end)
    if not success then warn("ZIndex failed for Dropdown: " .. tostring(err)) end

    local corner = Instance.new("UICorner", Dropdown)
    corner.CornerRadius = UDim.new(0, 6)

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -50, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = DropdownSettings.Name or "Dropdown"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.Gotham
    title.TextSize = 18
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = Dropdown
    success, err = pcall(function() title.ZIndex = 3 end)
    if not success then warn("ZIndex failed for title: " .. tostring(err)) end

    local selected = Instance.new("TextLabel")
    selected.Size = UDim2.new(0, 100, 0, 20)
    selected.Position = UDim2.new(1, -130, 0, 12)
    selected.BackgroundTransparency = 1
    selected.Text = "None"
    selected.TextColor3 = Color3.fromRGB(255, 255, 255)
    selected.Font = Enum.Font.Gotham
    selected.TextSize = 16
    selected.TextXAlignment = Enum.TextXAlignment.Right
    selected.Parent = Dropdown
    success, err = pcall(function() selected.ZIndex = 3 end)
    if not success then warn("ZIndex failed for selected: " .. tostring(err)) end

    local toggle = Instance.new("ImageLabel")
    toggle.Size = UDim2.new(0, 20, 0, 20)
    toggle.Position = UDim2.new(1, -30, 0, 12)
    toggle.BackgroundTransparency = 1
    toggle.Image = "rbxassetid://6031090990"
    toggle.ImageColor3 = Color3.fromRGB(255, 255, 255)
    toggle.Parent = Dropdown
    success, err = pcall(function() toggle.ZIndex = 3 end)
    if not success then warn("ZIndex failed for toggle: " .. tostring(err)) end

    local list = Instance.new("ScrollingFrame")
    list.Name = "List"
    list.Size = UDim2.new(1, -10, 0, 0)
    list.Position = UDim2.new(0, 5, 0, 45)
    list.BackgroundTransparency = 1
    list.BorderSizePixel = 0
    list.ScrollBarThickness = 2
    list.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    list.ScrollBarImageTransparency = 0.7
    list.Visible = false
    list.Parent = Dropdown
    success, err = pcall(function() list.ZIndex = 4 end)
    if not success then warn("ZIndex failed for list: " .. tostring(err)) end
    DropdownSettings.list = list -- Attach list to DropdownSettings

    local listLayout = Instance.new("UIListLayout", list)
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 2)

    if not DropdownSettings.CurrentOption then
        DropdownSettings.CurrentOption = {}
    elseif type(DropdownSettings.CurrentOption) == "string" then
        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption}
    end
    if not DropdownSettings.MultipleOptions and #DropdownSettings.CurrentOption > 1 then
        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption[1]}
    end
    selected.Text = DropdownSettings.CurrentOption[1] or "None"

    local hoverSound = Instance.new("Sound", Dropdown)
    hoverSound.SoundId = "rbxassetid://92876108656319"
    hoverSound.Volume = 0.1

    local clickSound = Instance.new("Sound", Dropdown)
    clickSound.SoundId = "rbxassetid://15675059323"
    clickSound.Volume = 0.3

    Dropdown.MouseEnter:Connect(function()
        if not list.Visible then
            TweenService:Create(Dropdown, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            }):Play()
            hoverSound:Play()
        end
    end)

    Dropdown.MouseLeave:Connect(function()
        if not list.Visible then
            TweenService:Create(Dropdown, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            }):Play()
        end
    end)

    local Debounce = false

    -- Fade options helper: fadeIn = true fades in, false fades out
    local function FadeOptions(options, fadeIn, duration)
        duration = duration or AnimationSettings.FadeDuration
        local totalDuration = duration

        for _, option in ipairs(options) do
            if option.ClassName == "TextButton" then
                -- Set initial transparencies
                option.BackgroundTransparency = fadeIn and 1 or 0.9
                for _, child in ipairs(option:GetChildren()) do
                    if child.ClassName == "TextLabel" then
                        child.TextTransparency = fadeIn and 1 or 0
                    end
                end

                -- Create tween for this option
                local tween = TweenService:Create(option, TweenInfo.new(duration, Enum.EasingStyle.Exponential), {
                    BackgroundTransparency = fadeIn and 0.9 or 1
                })
                tween:Play()
                for _, child in ipairs(option:GetChildren()) do
                    if child.ClassName == "TextLabel" then
                        TweenService:Create(child, TweenInfo.new(duration, Enum.EasingStyle.Exponential), {
                            TextTransparency = fadeIn and 0 or 1
                        }):Play()
                    end
                end
            end
        end

        return totalDuration
    end

    -- Function to adjust positions of sibling elements
    local function AdjustSiblingPositions(parent, currentDropdown, offset, duration)
        local siblings = parent:GetChildren()
        local layoutOrder = currentDropdown.LayoutOrder or 0
        for _, sibling in ipairs(siblings) do
            if sibling:IsA("GuiObject") and sibling ~= currentDropdown and (sibling.LayoutOrder or 0) > layoutOrder then
                local currentPos = sibling.Position
                local newPos = UDim2.new(currentPos.X.Scale, currentPos.X.Offset, currentPos.Y.Scale, currentPos.Y.Offset + offset)
                TweenService:Create(sibling, TweenInfo.new(duration, Enum.EasingStyle.Exponential), {
                    Position = newPos
                }):Play()
            end
        end
    end

    Dropdown.InputBegan:Connect(function(input)
        if input.UserInputType ~= Enum.UserInputType.MouseButton1 or Debounce then return end
        Debounce = true
        clickSound:Play()

        if list.Visible then
            -- Fade out all options at once
            local fadeDuration = FadeOptions(list:GetChildren(), false)

            -- After fade out, hide list and shrink dropdown
            task.delay(fadeDuration, function()
                list.Visible = false
                list.Size = UDim2.new(1, -10, 0, 0) -- Reset list size
                local shrinkTween = TweenService:Create(Dropdown, TweenInfo.new(AnimationSettings.ExpandDuration, Enum.EasingStyle.Exponential), {Size = UDim2.new(1.03, -10, 0, 45)})
                local toggleTween = TweenService:Create(toggle, TweenInfo.new(AnimationSettings.ToggleRotationDuration, Enum.EasingStyle.Exponential), {Rotation = 180})
                -- Move siblings back up
                AdjustSiblingPositions(currentPage, Dropdown, -(#DropdownSettings.Options * (40 + 2) - (DropdownSettings.Options[1] and 2 or 0)), AnimationSettings.ExpandDuration)
                shrinkTween:Play()
                toggleTween:Play()
                shrinkTween.Completed:Connect(function()
                    Debounce = false
                end)
            end)
        else
            -- Show list and expand dropdown
            list.Visible = true
            -- Set options fully transparent before fade in
            for _, option in ipairs(list:GetChildren()) do
                if option.ClassName == "TextButton" then
                    option.BackgroundTransparency = 1
                    for _, child in ipairs(option:GetChildren()) do
                        if child.ClassName == "TextLabel" then
                            child.TextTransparency = 1
                        end
                    end
                end
            end

            local optionCount = #DropdownSettings.Options
            local listHeight = optionCount * (40 + 2) - (optionCount > 0 and 2 or 0) -- 40 per option + 2 padding, minus padding for last option
            local newHeight = 45 + listHeight
            list.Size = UDim2.new(1, -10, 0, listHeight) -- Set list size based on options
            local expandTween = TweenService:Create(Dropdown, TweenInfo.new(AnimationSettings.ExpandDuration, Enum.EasingStyle.Exponential), {Size = UDim2.new(1.03, -10, 0, newHeight)})
            local toggleTween = TweenService:Create(toggle, TweenInfo.new(AnimationSettings.ToggleRotationDuration, Enum.EasingStyle.Exponential), {Rotation = 0})

            -- Move siblings down based on number of options
            AdjustSiblingPositions(currentPage, Dropdown, listHeight, AnimationSettings.ExpandDuration)

            expandTween:Play()
            toggleTween:Play()

            expandTween.Completed:Connect(function()
                -- Fade in all options at once
                local fadeDuration = FadeOptions(list:GetChildren(), true)
                task.delay(fadeDuration, function()
                    Debounce = false
                end)
            end)
        end
    end)

    -- Unified SetDropdownOptions function
    local function SetDropdownOptions(settings)
        if not settings.Options then
            settings.Options = {} -- Ensure Options is always a table
        end

        for _, Option in ipairs(settings.Options) do
            -- Parse DisplayName and username from the option string
            local displayName, username = Option:match("([^\n]+)\n(@.+)")
            if not displayName then displayName = Option end

            local DropdownOption = Instance.new("TextButton")
            DropdownOption.Name = Option
            DropdownOption.Size = UDim2.new(1, -10, 0, 40)
            DropdownOption.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            DropdownOption.BackgroundTransparency = 1
            DropdownOption.Text = ""
            DropdownOption.Parent = settings.list
            pcall(function() DropdownOption.ZIndex = 5 end)

            local optionCorner = Instance.new("UICorner", DropdownOption)
            optionCorner.CornerRadius = UDim.new(0, 4)

            -- DisplayName label
            local displayNameLabel = Instance.new("TextLabel")
            displayNameLabel.Size = UDim2.new(1, -10, 0, 20)
            displayNameLabel.Position = UDim2.new(0, 5, 0, 2)
            displayNameLabel.BackgroundTransparency = 1
            displayNameLabel.Text = displayName or Option
            displayNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            displayNameLabel.Font = Enum.Font.Gotham
            displayNameLabel.TextSize = 16
            displayNameLabel.TextXAlignment = Enum.TextXAlignment.Left
            displayNameLabel.Parent = DropdownOption
            pcall(function() displayNameLabel.ZIndex = 6 end)

            -- Username label
            local usernameLabel = Instance.new("TextLabel")
            usernameLabel.Size = UDim2.new(1, -10, 0, 16)
            usernameLabel.Position = UDim2.new(0, 5, 0, 22)
            usernameLabel.BackgroundTransparency = 1
            usernameLabel.Text = username or ""
            usernameLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
            usernameLabel.Font = Enum.Font.Gotham
            usernameLabel.TextSize = 12
            usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
            usernameLabel.Parent = DropdownOption
            pcall(function() usernameLabel.ZIndex = 6 end)

            DropdownOption.MouseEnter:Connect(function()
                for _, option in ipairs(settings.list:GetChildren()) do
                    if option.ClassName == "TextButton" then
                        if not table.find(settings.CurrentOption, option.Name) then
                            TweenService:Create(option, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                            }):Play()
                        end
                    end
                end
                if not table.find(settings.CurrentOption, Option) then
                    TweenService:Create(DropdownOption, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                    }):Play()
                end
                hoverSound:Play()
            end)

            DropdownOption.MouseLeave:Connect(function()
                if not table.find(settings.CurrentOption, Option) then
                    TweenService:Create(DropdownOption, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                    }):Play()
                end
            end)

            DropdownOption.MouseButton1Click:Connect(function()
                clickSound:Play()
                if table.find(settings.CurrentOption, Option) and not settings.MultipleOptions then
                    return
                end

                if table.find(settings.CurrentOption, Option) then
                    table.remove(settings.CurrentOption, table.find(settings.CurrentOption, Option))
                    TweenService:Create(DropdownOption, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                        BackgroundTransparency = 1
                    }):Play()
                else
                    if not settings.MultipleOptions then
                        table.clear(settings.CurrentOption)
                        for _, option in ipairs(settings.list:GetChildren()) do
                            if option.ClassName == "TextButton" and option ~= DropdownOption then
                                TweenService:Create(option, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                                    BackgroundTransparency = 1
                                }):Play()
                            end
                        end
                    end
                    table.insert(settings.CurrentOption, Option)
                    TweenService:Create(DropdownOption, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(100, 100, 100),
                        BackgroundTransparency = 0.7
                    }):Play()
                end

                selected.Text = settings.MultipleOptions and (#settings.CurrentOption > 1 and "Various" or settings.CurrentOption[1] or "None") or settings.CurrentOption[1] or "None"

                if typeof(settings.Callback) == "function" then
                    local success, err = pcall(function()
                        settings.Callback(settings.CurrentOption)
                    end)
                    if not success then
                        warn("Callback error for " .. settings.Name .. ": " .. tostring(err))
                    end
                end

                if not settings.MultipleOptions then
                    local fadeDuration = FadeOptions(settings.list:GetChildren(), false)
                    task.delay(fadeDuration, function()
                        local shrinkTween = TweenService:Create(Dropdown, TweenInfo.new(AnimationSettings.ExpandDuration, Enum.EasingStyle.Exponential), {Size = UDim2.new(1.03, -10, 0, 45)})
                        local toggleTween = TweenService:Create(toggle, TweenInfo.new(AnimationSettings.ToggleRotationDuration, Enum.EasingStyle.Exponential), {Rotation = 180})
                        settings.list.Visible = false
                        settings.list.Size = UDim2.new(1, -10, 0, 0) -- Reset list size
                        -- Move siblings back up
                        AdjustSiblingPositions(currentPage, Dropdown, -(#settings.Options * (40 + 2) - (settings.Options[1] and 2 or 0)), AnimationSettings.ExpandDuration)
                        shrinkTween:Play()
                        toggleTween:Play()
                        shrinkTween.Completed:Connect(function()
                            Debounce = false
                        end)
                    end)
                end
            end)
        end
        local optionCount = #settings.Options
        local listHeight = optionCount * (40 + 2) - (optionCount > 0 and 2 or 0) -- 40 per option + 2 padding, minus padding for last option
        settings.list.Size = UDim2.new(1, -10, 0, listHeight)
        settings._dropdownHeight = 45 + listHeight
    end

    function DropdownSettings:SetOptions(newOptions)
        -- Ensure newOptions is a valid table
        self.Options = (type(newOptions) == "table" and newOptions) or {}
        
        -- Clear existing options
        for _, option in ipairs(self.list:GetChildren()) do
            if option.ClassName == "TextButton" then
                option:Destroy()
            end
        end
        
        -- Call SetDropdownOptions to rebuild the options
        SetDropdownOptions(self)
        
        -- Adjust sibling positions after updating options
        if self.list.Visible then
            local optionCount = #self.Options
            local listHeight = optionCount * (40 + 2) - (optionCount > 0 and 2 or 0)
            AdjustSiblingPositions(currentPage, Dropdown, listHeight, AnimationSettings.ExpandDuration)
        end
    end

    function DropdownSettings:Refresh(optionsTable)
        self.Options = (type(optionsTable) == "table" and optionsTable) or {}
        for _, option in ipairs(self.list:GetChildren()) do
            if option.ClassName == "TextButton" then
                option:Destroy()
            end
        end
        SetDropdownOptions(self)
        
        -- Adjust sibling positions after refreshing options
        if self.list.Visible then
            local optionCount = #self.Options
            local listHeight = optionCount * (40 + 2) - (optionCount > 0 and 2 or 0)
            AdjustSiblingPositions(currentPage, Dropdown, listHeight, AnimationSettings.ExpandDuration)
        end
    end

    function DropdownSettings:Set(NewOption)
        if typeof(NewOption) == "string" then
            NewOption = {NewOption}
        end

        self.CurrentOption = NewOption
        if not self.MultipleOptions and #self.CurrentOption > 1 then
            self.CurrentOption = {self.CurrentOption[1]}
        end

        selected.Text = self.MultipleOptions and (#self.CurrentOption > 1 and "Various" or self.CurrentOption[1] or "None") or self.CurrentOption[1] or "None"
        for _, option in ipairs(list:GetChildren()) do
            if option.ClassName == "TextButton" then
                local isSelected = table.find(self.CurrentOption, option.Name)
                TweenService:Create(option, TweenInfo.new(AnimationSettings.SelectionTransitionDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundColor3 = isSelected and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(0, 0, 0),
                    BackgroundTransparency = isSelected and 0.7 or 1
                }):Play()
            end
        end

        if typeof(self.Callback) == "function" then
            local success, err = pcall(function()
                self.Callback(self.CurrentOption)
            end)
            if not success then
                warn("Callback error for " .. self.Name .. ": " .. tostring(err))
            end
        end
    end

    -- Initialize dropdown options
    SetDropdownOptions(DropdownSettings)

    return DropdownSettings
end,
--[[
        CreateParagraph = function(_, options)
            local currentPage = tabPages[tabName]
            if not currentPage then return end

            local paragraphFrame = Instance.new("Frame")
            paragraphFrame.Size = UDim2.new(1.03, -20, 0, 120)
            paragraphFrame.BackgroundTransparency = 1
            paragraphFrame.Position = UDim2.new(0, 10, 0, 10)
            paragraphFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            paragraphFrame.BorderColor3 = Color3.fromRGB(255, 255, 255)
            paragraphFrame.BorderSizePixel = 2
            paragraphFrame.ZIndex = 2
            paragraphFrame.Parent = currentPage

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 2)
            corner.Parent = paragraphFrame

            local paragraphText = Instance.new("TextLabel")
            paragraphText.Size = UDim2.new(1, -30, 1, -30)
            paragraphText.Position = UDim2.new(0, 10, 0, 20)
            paragraphText.BackgroundTransparency = 1
            paragraphText.Text = options.Content or "Not Loaded Correctly :("
            paragraphText.Font = Enum.Font.SourceSans
            paragraphText.TextColor3 = Color3.fromRGB(255, 255, 255)
            paragraphText.TextSize = 24
            paragraphText.TextWrapped = true
            paragraphText.TextXAlignment = Enum.TextXAlignment.Left
            paragraphText.TextYAlignment = Enum.TextYAlignment.Top
            paragraphText.TextZIndex = 2
            paragraphText.Parent = paragraphFrame
            if options.Title then

                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1, -40, 0, 20)
                titleLabel.Position = UDim2.new(0, 10, 0, 0)
                titleLabel.BackgroundTransparency = 1
                titleLabel.Text = options.Title
                titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                titleLabel.Font = Enum.Font.SourceSansSemibold
                titleLabel.TextSize = 22
                titleLabel.TextXAlignment = Enum.TextXAlignment.Left
                titleLabel.TextYAlignment = Enum.TextYAlignment.Top
                titleLabel.ZIndex = 2
                titleLabel.Parent = paragraphFrame
            end

            local copyButton = createIconButton("copy", paragraphFrame)
            if copyButton then
                copyButton.Position = UDim2.new(1, -25, 0, 5)
                copyButton.ZIndex = 3
                copyButton.MouseButton1Click:Connect(function()
                    if paragraphText and paragraphText:IsA("TextLabel") then
                        setclipboard(paragraphText.Text)
                    else
                        warn("Paragraph text label not found or invalid")
                    end
                end)
            end
            return paragraphFrame
        end,
]]
CreateToggle = function(_, options)
    local currentPage = tabPages[tabName]
    if not currentPage then return end

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1.03, 0, 0, 40)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    toggleFrame.ZIndex = 2
    toggleFrame.Parent = currentPage

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = toggleFrame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -70, 0, 40)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Text = options.Name or "Toggle"  -- Initial text of the toggle
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.Gotham
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 2
    label.Parent = toggleFrame

    -- Function to update the label's text dynamically
    local function UpdateLabelText(newText)
        label.Text = newText or options.Name or "Toggle"
    end

    local switchContainer = Instance.new("Frame")
    switchContainer.Size = UDim2.new(0, 40, 0, 20)
    switchContainer.Position = UDim2.new(1, -50, 0, 10)
    switchContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    switchContainer.BackgroundTransparency = 0.9
    switchContainer.BorderSizePixel = 0
    switchContainer.ZIndex = 2
    switchContainer.Parent = toggleFrame

    local switchStroke = Instance.new("UIStroke")
    switchStroke.Thickness = 1
    switchStroke.Color = Color3.fromRGB(255, 255, 255)
    switchStroke.Transparency = 0.2
    switchStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    switchStroke.Parent = switchContainer

    local corner2 = Instance.new("UICorner")
    corner2.CornerRadius = UDim.new(0, 10)
    corner2.Parent = switchContainer

    local knob = Instance.new("Frame")
    knob.Size = UDim2.new(0, 16, 0, 16)
    knob.AnchorPoint = Vector2.new(0, 0.5)
    knob.Position = options.CurrentValue and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.49, 0)
    knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    knob.BorderSizePixel = 0
    knob.ZIndex = 3
    knob.Parent = switchContainer

    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 10)
    knobCorner.Parent = knob

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = toggleFrame.Size
    toggleButton.Position = UDim2.new(0, 0, 0, 0)
    toggleButton.BackgroundTransparency = 1
    toggleButton.Text = ""
    toggleButton.ZIndex = 4
    toggleButton.Parent = toggleFrame

    local function toggleSwitch()
        options.CurrentValue = not options.CurrentValue
        local targetPosition = options.CurrentValue and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.49, 0)
        local toggleSound = Instance.new("Sound")
        toggleSound.Name = "ClickSound"
        toggleSound.SoundId = "rbxassetid://15675059323"
        toggleSound.Volume = 0.2
        toggleSound.Parent = toggleFrame
        toggleSound:Play()
        TweenService:Create(knob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Position = targetPosition
        }):Play()
        if typeof(options.Callback) == "function" then
            options.Callback(options.CurrentValue)
        end
    end

    toggleButton.MouseButton1Click:Connect(toggleSwitch)

    table.insert(toggles, {frame = toggleFrame, options = options})

    return toggleFrame, UpdateLabelText
end
    }
end

local Tab1 = Tab:New("Home")
local Tab2 = Tab:New("Player")
local Tab7 = Tab:New("Vc")
local Tab3 = Tab:New("GameTab")
local Tab4 = Tab:New("Locks/Aim")
local Tab5 = Tab:New("Esp's")
local Tab6 = Tab:New("Misc")

local Tabs = {
    Tab1 = Tab1,
    Tab2 = Tab2,
    Tab3 = Tab3,
    Tab4 = Tab4,
    Tab5 = Tab5,
    Tab6 = Tab6,
	Tab7 = Tab7
}

Tab1:CreateLabel({
    Name = "Home",
})

Tab1:CreateButton({
    Name = "Test Button",
    Callback = function()
        
    end
})

Tab1:CreateDropdown({
    Name = "Test Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Callback = function(selected)
        print("Selected options:", table.concat(selected, ", "))
    end
})

Tab1:CreateToggle({
    Name = "Test Toggle",
    CurrentValue = false,
    Callback = function(value)

    end
})

Tab2:CreateLabel({
    Name = "Player",
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

NotificationLib.Notify({
    Title = "Action Required!",
    Content = "Do you want to proceed with loading the player list?",
    Button1 = true,
    Button1Text = "Yes",
    Button1Callback = function()
        local function formatPlayer(player)
            return player.DisplayName .. "\n@" .. player.Name
        end

        local function getPlayerOptions()
            local options = {}
            for _, player in ipairs(Players:GetPlayers()) do
                table.insert(options, formatPlayer(player))
            end
            return options
        end

        local currentOrbitConnection
        local localPlayer = Players.LocalPlayer
        local orbitRadius = 10
        local orbitSpeed = 2

        local function startOrbit(targetPlayer)
            if currentOrbitConnection then
                currentOrbitConnection:Disconnect()
                currentOrbitConnection = nil
            end

            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetRoot = targetPlayer.Character.HumanoidRootPart
                local localRoot = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
                if localRoot then
                    currentOrbitConnection = RunService.Heartbeat:Connect(function(deltaTime)
                        local angle = tick() * orbitSpeed
                        local offset = Vector3.new(math.cos(angle) * orbitRadius, 0, math.sin(angle) * orbitRadius)
                        local newPosition = (targetRoot.CFrame * CFrame.new(offset)).Position
                        localRoot.CFrame = CFrame.lookAt(newPosition, targetRoot.Position)
                    end)
                end
            end
        end

        local playerDropdown, toggle

        playerDropdown = Tab2:CreateDropdown({
            Name = "Player List",
            Options = getPlayerOptions(),
            CurrentOption = {},
            MultipleOptions = false,
            Callback = function(selected)
                if currentOrbitConnection then
                    currentOrbitConnection:Disconnect()
                    currentOrbitConnection = nil
                end

                if selected[1] and toggle.CurrentValue then
                    local targetPlayerName = selected[1]:match("@(.+)")
                    local targetPlayer = Players:FindFirstChild(targetPlayerName)
                    startOrbit(targetPlayer)
                end
            end
        })

        toggle = Tab2:CreateToggle({
            Name = "Orbit Player",
            CurrentValue = false,
            Callback = function(value)
                if currentOrbitConnection then
                    currentOrbitConnection:Disconnect()
                    currentOrbitConnection = nil
                end

                if value and playerDropdown.CurrentOption[1] then
                    local targetPlayerName = playerDropdown.CurrentOption[1]:match("@(.+)")
                    local targetPlayer = Players:FindFirstChild(targetPlayerName)
                    startOrbit(targetPlayer)
                end
            end
        })

        local function updateDropdown()
            local newOptions = getPlayerOptions()
            playerDropdown:SetOptions(newOptions)
        end

        Players.PlayerAdded:Connect(updateDropdown)
        Players.PlayerRemoving:Connect(updateDropdown)

        NotificationLib.Notify({
            Title = "Players Loaded",
            Content = "The player list has been successfully loaded.",
            Duration = 6
        })
    end,
    Button2 = true,
    Button2Text = "No",
    Button2Callback = function()
        NotificationLib.Notify({
            Title = "Action Cancelled",
            Content = "Player list was not loaded.",
            Duration = 4
        })
    end
})

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")

local function giveTool()
   local tool = Instance.new("Tool")
   tool.Name = "$ilence.Wtf Jerk Off .gg/djMQRCNAAZ"

   local handle = Instance.new("Part")
   handle.Name = "Handle"
   handle.Size = Vector3.new(1, 1, 1)
   handle.CanCollide = false
   handle.Transparency = 1
   handle.Parent = tool
   tool.RequiresHandle = true

   local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
   local jerkAnim = Instance.new("Animation")
   jerkAnim.AnimationId = "rbxassetid://698251653"

   local jerk
   local jerking = false
   local jerkSpeed = 1
   local timePosition = 0.6

   local function playJerkAnimation()
       if jerking then
           warn("Jerk animation is already playing.")
           return
       end

       if humanoid then
           jerk = humanoid:LoadAnimation(jerkAnim)
           jerking = true

           jerk:Play()
           jerk:AdjustSpeed(jerkSpeed)
           jerk.TimePosition = timePosition

           task.spawn(function()
               while jerking do
                   task.wait()
                   if not jerking then return end
                   jerk:Play()
                   jerk.TimePosition = timePosition
                   task.wait(0.1)

                   while jerk.TimePosition < timePosition do
                       task.wait(0.1)
                   end

                   jerk:Stop()
               end
           end)
       end
   end

   local function stopJerkAnimation()
       if jerk then
           jerk:Stop()
           jerk:Destroy()
       end
       jerking = false
   end

   tool.Equipped:Connect(function()
       humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
       playJerkAnimation()
   end)

   tool.Unequipped:Connect(function()
       stopJerkAnimation()
   end)

   tool.Parent = backpack
end

Tab2:CreateButton({
    Name = "Jerk Tool (FE)",
    Callback = function()
        giveTool()
    end
})



local AvatarEditorService = game:GetService("AvatarEditorService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

Tab2:CreateDropdown({
    Name = "Test Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Callback = function(selected)
        print("Selected options:", table.concat(selected, ", "))
    end
})

--keybind to open is comma
--made by Gi#7331

local IsStudio = false

local ContextActionService = game:GetService("ContextActionService")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local AvatarEditorService = game:GetService("AvatarEditorService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

local Emotes = {}
local function AddEmote(name: string, id: IntValue, price: IntValue?, isUGC: boolean?)
	if not (name and id) then
		return
	end
	table.insert(Emotes, {
		name = name,
		id = id,
		icon = "rbxthumb://type=Asset&id=".. id .."&w=150&h=150",
		price = price or 0,
		index = #Emotes + 1,
		isUGC = isUGC or false,
		sort = {}
	})
end

local CurrentSort = "newestfirst"
local CurrentGridSize = "medium"
local CurrentSize = "medium"
local GridSizeScales = {
	small = UDim2.new(0.09, 0, 0, 0),
	medium = UDim2.new(0.105, 0, 0, 0),
	large = UDim2.new(0.15, 0, 0, 0),
}
local SizeScales = { small = 0.9, medium = 1.3, large = 1.4 }
local FavoriteOff = "rbxassetid://10651060677"
local FavoriteOn = "rbxassetid://10651061109"
local FavoritedEmotes = {}
local shouldCloseOnEmote = true
local showFavorites = true
local showRandom = true
local isMenuEnabled = false -- Tracks whether the menu is enabled

local function IsFileFunc(...)
	if IsStudio then
		return
	elseif isfile then
		return isfile(...)
	end
end

local function WriteFileFunc(...)
	if IsStudio then
		return
	elseif writefile then
		return writefile(...)
	end
end

local function ReadFileFunc(...)
	if IsStudio then
		return
	elseif readfile then
		return readfile(...)
	end
end

if not IsStudio then
	if IsFileFunc("FavoritedEmotes.txt") then
		if not pcall(function()
			FavoritedEmotes = HttpService:JSONDecode(ReadFileFunc("FavoritedEmotes.txt"))
		end) then
			FavoritedEmotes = {}
		end
	else
		WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
	end
	local UpdatedFavorites = {}
	for i, name in pairs(FavoritedEmotes) do
		if typeof(name) == "string" then
			for i, emote in pairs(Emotes) do
				if emote.name == name then
					table.insert(UpdatedFavorites, emote.id)
					break
				end
			end
		end
	end
	if #UpdatedFavorites ~= 0 then
		FavoritedEmotes = UpdatedFavorites
		WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
	end
end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "Emotes"
ScreenGui.DisplayOrder = 2
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false
ScreenGui.Enabled = false

local BackFrame = Instance.new("Frame")
BackFrame.Size = UDim2.new(0.9, 0, 0.5, 0)
BackFrame.AnchorPoint = Vector2.new(0.5, 0.5)
BackFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
BackFrame.SizeConstraint = Enum.SizeConstraint.RelativeYY
BackFrame.BackgroundTransparency = 1
BackFrame.BorderSizePixel = 0
BackFrame.Parent = ScreenGui

local TextLabel = Instance.new("TextLabel")
TextLabel.Size = UDim2.new(0.6, 0, 0.2, 0)
TextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
TextLabel.Text = "MADE BY $ILENCE.WTF"
TextLabel.TextScaled = true
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1
TextLabel.Font = Enum.Font.GothamBold 
TextLabel.TextSize = 40
TextLabel.TextStrokeTransparency = 0.8
TextLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.ZIndex = 1
TextLabel.TextTransparency = 0.7
TextLabel.Parent = BackFrame

local EmoteName = Instance.new("TextLabel")
EmoteName.Name = "EmoteName"
EmoteName.TextScaled = true
EmoteName.AnchorPoint = Vector2.new(0.5, 0.5)
EmoteName.Position = UDim2.new(-0.1, 0, 0.5, 0)
EmoteName.Size = UDim2.new(0.2, 0, 0.2, 0)
EmoteName.SizeConstraint = Enum.SizeConstraint.RelativeYY
EmoteName.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
EmoteName.TextColor3 = Color3.new(1, 1, 1)
EmoteName.BorderSizePixel = 0
EmoteName.Text = "Select an Emote"
local Corner = Instance.new("UICorner")
Corner.Parent = EmoteName
EmoteName.Parent = BackFrame

local Loading = Instance.new("TextLabel", BackFrame)
Loading.AnchorPoint = Vector2.new(0.5, 0.5)
Loading.Text = "[Silence Hangout] Loading..."
Loading.TextColor3 = Color3.new(1, 1, 1)
Loading.BackgroundColor3 = Color3.new(0, 0, 0)
Loading.TextScaled = true
Loading.BackgroundTransparency = 0.5
Loading.Size = UDim2.fromScale(0.2, 0.1)
Loading.Position = UDim2.fromScale(0.5, 0.2)
Corner:Clone().Parent = Loading
Loading.Parent = BackFrame

local Frame = Instance.new("ScrollingFrame")
Frame.Size = UDim2.new(1, 0, 1, 0)
Frame.CanvasSize = UDim2.new(0, 0, 0, 0)
Frame.AutomaticCanvasSize = Enum.AutomaticSize.Y
Frame.ScrollingDirection = Enum.ScrollingDirection.Y
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame.BackgroundTransparency = 1
Frame.ScrollBarThickness = 5
Frame.BorderSizePixel = 0
Frame.MouseLeave:Connect(function()
	EmoteName.Text = "Select an Emote"
end)
Frame.Parent = BackFrame

local Grid = Instance.new("UIGridLayout")
Grid.CellSize = GridSizeScales[CurrentGridSize]
Grid.CellPadding = UDim2.new(0.006, 0, 0.006, 0)
Grid.SortOrder = Enum.SortOrder.LayoutOrder
Grid.Parent = Frame

local SizeFrame = Instance.new("Frame")
SizeFrame.Visible = false
SizeFrame.BorderSizePixel = 0
SizeFrame.Position = UDim2.new(1, 5, -0.225, 0)
SizeFrame.Size = UDim2.new(0.2, 0, 0, 0)
SizeFrame.AutomaticSize = Enum.AutomaticSize.Y
SizeFrame.BackgroundTransparency = 1
Corner:Clone().Parent = SizeFrame
SizeFrame.Parent = BackFrame

local SizeList = Instance.new("UIListLayout")
SizeList.Padding = UDim.new(0.02, 0)
SizeList.HorizontalAlignment = Enum.HorizontalAlignment.Center
SizeList.VerticalAlignment = Enum.VerticalAlignment.Top
SizeList.SortOrder = Enum.SortOrder.LayoutOrder
SizeList.Parent = SizeFrame

local function CreateSize(order, text, size)
	local button = Instance.new("TextButton")
	button.SizeConstraint = Enum.SizeConstraint.RelativeXX
	button.Size = UDim2.new(1, 0, 0.2, 0)
	button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	button.LayoutOrder = order
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Text = text
	button.TextScaled = true
	button.BorderSizePixel = 0
	Corner:Clone().Parent = button
	button.Parent = SizeFrame
	button.MouseButton1Click:Connect(function()
		SizeFrame.Visible = false
		CurrentSize = size
		local scale = SizeScales[size]
		BackFrame.Size = UDim2.new(0.9 * scale, 0, 0.5 * scale, 0)
	end)
	return button
end
CreateSize(1, "Small", "small")
CreateSize(2, "Medium", "medium")
CreateSize(3, "Large", "large")

local GridSizeFrame = Instance.new("Frame")
GridSizeFrame.Visible = false
GridSizeFrame.BorderSizePixel = 0
GridSizeFrame.Position = UDim2.new(1, 5, -0.225, 0)
GridSizeFrame.Size = UDim2.new(0.2, 0, 0, 0)
GridSizeFrame.AutomaticSize = Enum.AutomaticSize.Y
GridSizeFrame.BackgroundTransparency = 1
Corner:Clone().Parent = GridSizeFrame
GridSizeFrame.Parent = BackFrame

local GridSizeList = Instance.new("UIListLayout")
GridSizeList.Padding = UDim.new(0.02, 0)
GridSizeList.HorizontalAlignment = Enum.HorizontalAlignment.Center
GridSizeList.VerticalAlignment = Enum.VerticalAlignment.Top
GridSizeList.SortOrder = Enum.SortOrder.LayoutOrder
GridSizeList.Parent = GridSizeFrame

local function CreateGridSize(order, text, size)
	local button = Instance.new("TextButton")
	button.SizeConstraint = Enum.SizeConstraint.RelativeXX
	button.Size = UDim2.new(1, 0, 0.2, 0)
	button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	button.LayoutOrder = order
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Text = text
	button.TextScaled = true
	button.BorderSizePixel = 0
	Corner:Clone().Parent = button
	button.Parent = GridSizeFrame
	button.MouseButton1Click:Connect(function()
		GridSizeFrame.Visible = false
		CurrentGridSize = size
		Grid.CellSize = GridSizeScales[size]
	end)
	return button
end
CreateGridSize(1, "Small", "small")
CreateGridSize(2, "Medium", "medium")
CreateGridSize(3, "Large", "large")

local SizeButton = Instance.new("TextButton")
SizeButton.BorderSizePixel = 0
SizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
SizeButton.Position = UDim2.new(0.925, -5, -0.185, 0)
SizeButton.Size = UDim2.new(0.15, 0, 0.1, 0)
SizeButton.TextScaled = true
SizeButton.TextColor3 = Color3.new(1, 1, 1)
SizeButton.BackgroundColor3 = Color3.new(0, 0, 0)
SizeButton.BackgroundTransparency = 0.3
SizeButton.Text = "Size"
SizeButton.MouseButton1Click:Connect(function()
	SizeFrame.Visible = not SizeFrame.Visible
	if SizeFrame.Visible then
		GridSizeFrame.Visible = false
		SortFrame.Visible = false
	end
end)
Corner:Clone().Parent = SizeButton
SizeButton.Parent = BackFrame

local GridSizeButton = Instance.new("TextButton")
GridSizeButton.BorderSizePixel = 0
GridSizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
GridSizeButton.Position = UDim2.new(0.77, -5, -0.185, 0)
GridSizeButton.Size = UDim2.new(0.15, 0, 0.1, 0)
GridSizeButton.TextScaled = true
GridSizeButton.TextColor3 = Color3.new(1, 1, 1)
GridSizeButton.BackgroundColor3 = Color3.new(0, 0, 0)
GridSizeButton.BackgroundTransparency = 0.3
GridSizeButton.Text = "Emote Size"
GridSizeButton.MouseButton1Click:Connect(function()
	GridSizeFrame.Visible = not GridSizeFrame.Visible
	if GridSizeFrame.Visible then
		SizeFrame.Visible = false 
		SortFrame.Visible = false
	end
end)
Corner:Clone().Parent = GridSizeButton
GridSizeButton.Parent = BackFrame

local ToggleRandomButton = Instance.new("TextButton")
ToggleRandomButton.BorderSizePixel = 0
ToggleRandomButton.AnchorPoint = Vector2.new(0.5, 0.5)
ToggleRandomButton.Position = UDim2.new(0.67, -5, -0.185, 0)
ToggleRandomButton.Size = UDim2.new(0.04, 0, 0.08, 0)
ToggleRandomButton.TextScaled = true
ToggleRandomButton.TextColor3 = Color3.new(1, 1, 1)
ToggleRandomButton.BackgroundColor3 = Color3.new(0, 0, 0)
ToggleRandomButton.BackgroundTransparency = 0.3
ToggleRandomButton.Text = "🎲"
ToggleRandomButton.MouseButton1Click:Connect(function()
	showRandom = not showRandom
	ToggleRandomButton.Text = showRandom and "🎲" or "❌"
	local randomButton = Frame:FindFirstChild("random")
	if randomButton then
		randomButton.Visible = showRandom
	end
end)
Corner:Clone().Parent = ToggleRandomButton
ToggleRandomButton.Parent = BackFrame

local SortFrame = Instance.new("Frame")
SortFrame.Visible = false
SortFrame.BorderSizePixel = 0
SortFrame.Position = UDim2.new(1, 5, -0.125, 0)
SortFrame.Size = UDim2.new(0.2, 0, 0, 0)
SortFrame.AutomaticSize = Enum.AutomaticSize.Y
SortFrame.BackgroundTransparency = 1
Corner:Clone().Parent = SortFrame
SortFrame.Parent = BackFrame

local SortList = Instance.new("UIListLayout")
SortList.Padding = UDim.new(0.02, 0)
SortList.HorizontalAlignment = Enum.HorizontalAlignment.Center
SortList.VerticalAlignment = Enum.VerticalAlignment.Top
SortList.SortOrder = Enum.SortOrder.LayoutOrder
SortList.Parent = SortFrame

local function SortEmotes()
	for i, Emote in pairs(Emotes) do
		local EmoteButton = Frame:FindFirstChild(Emote.id)
		if not EmoteButton then
			continue
		end
		local IsFavorited = table.find(FavoritedEmotes, Emote.id)
		EmoteButton.LayoutOrder = Emote.sort[CurrentSort] + ((IsFavorited and 0) or #Emotes)
		EmoteButton.number.Text = Emote.sort[CurrentSort]
	end
end

local function createsort(order, text, sort)
	local CreatedSort = Instance.new("TextButton")
	CreatedSort.SizeConstraint = Enum.SizeConstraint.RelativeXX
	CreatedSort.Size = UDim2.new(1, 0, 0.2, 0)
	CreatedSort.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	CreatedSort.LayoutOrder = order
	CreatedSort.TextColor3 = Color3.new(1, 1, 1)
	CreatedSort.Text = text
	CreatedSort.TextScaled = true
	CreatedSort.BorderSizePixel = 0
	Corner:Clone().Parent = CreatedSort
	CreatedSort.Parent = SortFrame
	CreatedSort.MouseButton1Click:Connect(function()
		SortFrame.Visible = false
		CurrentSort = sort
		SortEmotes()
	end)
	return CreatedSort
end

createsort(1, "Newest First", "newestfirst")
createsort(2, "Oldest First", "oldestfirst")
createsort(3, "Alphabetically First", "alphabeticfirst")
createsort(4, "Alphabetically Last", "alphabeticlast")
createsort(5, "Highest Price", "highestprice")
createsort(6, "Lowest Price", "lowestprice")
createsort(7, "UGC First", "ugcfirst")
createsort(8, "Roblox First", "robloxfirst")

local SortButton = Instance.new("TextButton")
SortButton.BorderSizePixel = 0
SortButton.AnchorPoint = Vector2.new(0.5, 0.5)
SortButton.Position = UDim2.new(0.925, -5, -0.075, 0)
SortButton.Size = UDim2.new(0.15, 0, 0.1, 0)
SortButton.TextScaled = true
SortButton.TextColor3 = Color3.new(1, 1, 1)
SortButton.BackgroundColor3 = Color3.new(0, 0, 0)
SortButton.BackgroundTransparency = 0.3
SortButton.Text = "Sort"
SortButton.MouseButton1Click:Connect(function()
	SortFrame.Visible = not SortFrame.Visible
end)
Corner:Clone().Parent = SortButton
SortButton.Parent = BackFrame

local ToggleCloseButton = Instance.new("TextButton")
ToggleCloseButton.BorderSizePixel = 0
ToggleCloseButton.AnchorPoint = Vector2.new(0.5, 0.5)
ToggleCloseButton.Position = UDim2.new(0.825, -5, -0.075, 0)
ToggleCloseButton.Size = UDim2.new(0.04, 0, 0.08, 0)
ToggleCloseButton.TextScaled = true
ToggleCloseButton.TextColor3 = Color3.new(1, 1, 1)
ToggleCloseButton.BackgroundColor3 = Color3.new(0, 0, 0)
ToggleCloseButton.BackgroundTransparency = 0.3
ToggleCloseButton.Text = "👀"
Corner:Clone().Parent = ToggleCloseButton
ToggleCloseButton.Parent = BackFrame
ToggleCloseButton.MouseButton1Click:Connect(function()
	shouldCloseOnEmote = not shouldCloseOnEmote
	ToggleCloseButton.Text = shouldCloseOnEmote and "👀" or "🔒"
end)

local ToggleFavoritesButton = Instance.new("TextButton")
ToggleFavoritesButton.BorderSizePixel = 0
ToggleFavoritesButton.AnchorPoint = Vector2.new(0.7, 0.5)
ToggleFavoritesButton.Position = UDim2.new(0.79, -5, -0.075, 0)
ToggleFavoritesButton.Size = UDim2.new(0.04, 0, 0.08, 0)
ToggleFavoritesButton.TextScaled = true
ToggleFavoritesButton.TextColor3 = Color3.new(1, 1, 1)
ToggleFavoritesButton.BackgroundColor3 = Color3.new(0, 0, 0)
ToggleFavoritesButton.BackgroundTransparency = 0.3
ToggleFavoritesButton.Text = "⭐"
Corner:Clone().Parent = ToggleFavoritesButton
ToggleFavoritesButton.Parent = BackFrame
ToggleFavoritesButton.MouseButton1Click:Connect(function()
	showFavorites = not showFavorites
	ToggleFavoritesButton.Text = showFavorites and "⭐" or "❌"
	for _, button in ipairs(Frame:GetChildren()) do
		if button:IsA("GuiButton") and button.Name ~= "random" then
			local favoriteIcon = button:FindFirstChild("favorite")
			if favoriteIcon then
				favoriteIcon.Visible = showFavorites
			end
		end
	end
end)

local CloseButton = Instance.new("TextButton")
CloseButton.BorderSizePixel = 0
CloseButton.AnchorPoint = Vector2.new(0.5, 0.5)
CloseButton.Position = UDim2.new(0.075, 0, -0.075, 0)
CloseButton.Size = UDim2.new(0.15, 0, 0.1, 0)
CloseButton.TextScaled = true
CloseButton.TextColor3 = Color3.new(1, 1, 1)
CloseButton.BackgroundColor3 = Color3.new(0, 0, 0)
CloseButton.BackgroundTransparency = 0.3
CloseButton.Text = "Close"
CloseButton.MouseButton1Click:Connect(function()
	ScreenGui.Enabled = false
end)
Corner:Clone().Parent = CloseButton
CloseButton.Parent = BackFrame

local SearchBar = Instance.new("TextBox")
SearchBar.BorderSizePixel = 0
SearchBar.AnchorPoint = Vector2.new(0.5, 0.5)
SearchBar.Position = UDim2.new(0.475, 0, -0.075, 0)
SearchBar.Size = UDim2.new(0.55, 0, 0.1, 0)
SearchBar.TextScaled = true
SearchBar.PlaceholderText = "Search"
SearchBar.TextColor3 = Color3.new(1, 1, 1)
SearchBar.BackgroundColor3 = Color3.new(0, 0, 0)
SearchBar.BackgroundTransparency = 0.3
SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
	local text = SearchBar.Text:lower()
	local buttons = Frame:GetChildren()
	if text ~= text:sub(1,50) then
		SearchBar.Text = text:sub(1,50)
		text = SearchBar.Text:lower()
	end
	if text ~= "" then
		for i,button in pairs(buttons) do
			if button:IsA("GuiButton") then
				local name = button:GetAttribute("name"):lower()
				if name:match(text) then
					button.Visible = true
				else
					button.Visible = false
				end
			end
		end
	else
		for i,button in pairs(buttons) do
			if button:IsA("GuiButton") then
				button.Visible = true
			end
		end
	end
end)
Corner:Clone().Parent = SearchBar
SearchBar.Parent = BackFrame

local function openemotes(name, state, input)
	if state == Enum.UserInputState.Begin and isMenuEnabled then
		ScreenGui.Enabled = not ScreenGui.Enabled
	end
end

Tab2:CreateToggle({
    Name = "Toggle Emote Gui ($ilence.Wtf)",
    CurrentValue = false,
    Callback = function(value)
        isMenuEnabled = value
        if value then
            if IsStudio then
                ContextActionService:BindActionAtPriority(
                    "Emote Menu",
                    openemotes,
                    true,
                    2001,
                    Enum.KeyCode.Comma
                )
            else
                ContextActionService:BindCoreActionAtPriority(
                    "Emote Menu",
                    openemotes,
                    true,
                    2001,
                    Enum.KeyCode.Comma
                )
            end
        else
            if IsStudio then
                ContextActionService:UnbindAction("Emote Menu")
            else
                ContextActionService:UnbindCoreAction("Emote Menu")
            end
            ScreenGui.Enabled = false -- Close the menu if it's open when disabled
        end
    end
})

local inputconnect
ScreenGui:GetPropertyChangedSignal("Enabled"):Connect(function()
	if ScreenGui.Enabled == true then
		EmoteName.Text = "Select an Emote"
		SearchBar.Text = ""
		SortFrame.Visible = false
		SizeFrame.Visible = false
		GridSizeFrame.Visible = false
		GuiService:SetEmotesMenuOpen(false)
		inputconnect = UserInputService.InputBegan:Connect(function(input, processed)
			if not processed then
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					ScreenGui.Enabled = false
				end
			end
		end)
	else
		inputconnect:Disconnect()
	end
end)

if not IsStudio then
	GuiService.EmotesMenuOpenChanged:Connect(function(isopen)
		if isopen then
			ScreenGui.Enabled = false
		end
	end)
end

GuiService.MenuOpened:Connect(function()
	ScreenGui.Enabled = false
end)

if not game:IsLoaded() then
	game.Loaded:Wait()
end

local LocalPlayer = Players.LocalPlayer

if IsStudio then
	ScreenGui.Parent = LocalPlayer.PlayerGui
else
	local SynV3 = syn and DrawingImmediate
	if (not is_sirhurt_closure) and (not SynV3) and (syn and syn.protect_gui) then
		syn.protect_gui(ScreenGui)
		ScreenGui.Parent = CoreGui
	elseif get_hidden_gui or gethui then
		local hiddenUI = get_hidden_gui or gethui
		ScreenGui.Parent = hiddenUI()
	else
		ScreenGui.Parent = CoreGui
	end
end

local function SendNotification(title, text)
	if (not IsStudio) and syn and syn.toast_notification then
		syn.toast_notification({
			Type = ToastType.Error,
			Title = title,
			Content = text
		})
	else
		StarterGui:SetCore("SendNotification", {
			Title = title,
			Text = text
		})
	end
end

local function HumanoidPlayEmote(humanoid, name, id)
	if IsStudio then
		return humanoid:PlayEmote(name)
	else
		return humanoid:PlayEmoteAndGetAnimTrackById(id)
	end
end

local function PlayEmote(name: string, id: IntValue)
	if shouldCloseOnEmote then
		ScreenGui.Enabled = false
	end
	SearchBar.Text = ""
	local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	local Description = Humanoid and Humanoid:FindFirstChildOfClass("HumanoidDescription")
	if not Description then
		return
	end
	if LocalPlayer.Character.Humanoid.RigType ~= Enum.HumanoidRigType.R15 then
		SendNotification(
			"r6? lol",
			"you gotta be r15 dude"
		)
		return
	end
	local succ, err = pcall(function()
		HumanoidPlayEmote(Humanoid, name, id)
	end)
	if not succ then
		Description:AddEmote(name, id)
		HumanoidPlayEmote(Humanoid, name, id)
	end
end

local function WaitForChildOfClass(parent, class)
	local child = parent:FindFirstChildOfClass(class)
	while not child or child.ClassName ~= class do
		child = parent.ChildAdded:Wait()
	end
	return child
end

local params = CatalogSearchParams.new()
params.AssetTypes = {Enum.AvatarAssetType.EmoteAnimation}
params.SortType = Enum.CatalogSortType.RecentlyCreated
params.SortAggregation = Enum.CatalogSortAggregation.AllTime
params.IncludeOffSale = true
params.Limit = 120

local function getCatalogPage()
	local success, catalogPage = pcall(function()
		return AvatarEditorService:SearchCatalog(params)
	end)
	if not success then
		task.wait(5)
		return getCatalogPage()
	end
	return catalogPage
end

local catalogPage = getCatalogPage()

local pages = {}

while true do
	local currentPage = catalogPage:GetCurrentPage()
	table.insert(pages, currentPage)
	if catalogPage.IsFinished then
		break
	end
	local function AdvanceToNextPage()
		local success = pcall(function()
			catalogPage:AdvanceToNextPageAsync()
		end)
		if not success then
			task.wait(5)
			return AdvanceToNextPage()
		end
	end
	AdvanceToNextPage()
end

local totalEmotes = {}
for _, page in pairs(pages) do
	for _, emote in pairs(page) do
		table.insert(totalEmotes, emote)
	end
end

for i, Emote in pairs(totalEmotes) do
	AddEmote(Emote.Name, Emote.Id, Emote.Price)
end

local UGCEmoteIds = {
	{ id = 134009200147984, name = "Gojo Swagger Soda Walk" },
}

for _, ugcEmote in ipairs(UGCEmoteIds) do
	AddEmote(ugcEmote.name, ugcEmote.id, nil, true)
end

AddEmote("Arm Wave", 5915773155)
AddEmote("Head Banging", 5915779725)
AddEmote("Face Calisthenics", 9830731012)

Loading:Destroy()

table.sort(Emotes, function(a, b)
	return a.index < b.index
end)
for i,v in pairs(Emotes) do
	v.sort.newestfirst = i
end

table.sort(Emotes, function(a, b)
	return a.index > b.index
end)
for i,v in pairs(Emotes) do
	v.sort.oldestfirst = i
end

table.sort(Emotes, function(a, b)
	return a.name:lower() < b.name:lower()
end)
for i,v in pairs(Emotes) do
	v.sort.alphabeticfirst = i
end

table.sort(Emotes, function(a, b)
	return a.name:lower() > b.name:lower()
end)
for i,v in pairs(Emotes) do
	v.sort.alphabeticlast = i
end

table.sort(Emotes, function(a, b)
	return a.price < b.price
end)
for i,v in pairs(Emotes) do
	v.sort.lowestprice = i
end

table.sort(Emotes, function(a, b)
	return a.price > b.price
end)
for i,v in pairs(Emotes) do
	v.sort.highestprice = i
end

table.sort(Emotes, function(a, b)
	if a.isUGC == b.isUGC then
		return a.index < b.index
	end
	return a.isUGC and not b.isUGC
end)
for i,v in pairs(Emotes) do
	v.sort.ugcfirst = i
end

table.sort(Emotes, function(a, b)
	if a.isUGC == b.isUGC then
		return a.index < b.index
	end
	return not a.isUGC and b.isUGC
end)
for i,v in pairs(Emotes) do
	v.sort.robloxfirst = i
end

local function CharacterAdded(Character)
	for i,v in pairs(Frame:GetChildren()) do
		if not v:IsA("UIGridLayout") then
			v:Destroy()
		end
	end
	local Humanoid = WaitForChildOfClass(Character, "Humanoid")
	local Description = Humanoid:WaitForChild("HumanoidDescription", 5) or Instance.new("HumanoidDescription", Humanoid)
	local random = Instance.new("TextButton")
	local Ratio = Instance.new("UIAspectRatioConstraint")
	Ratio.AspectType = Enum.AspectType.ScaleWithParentSize
	Ratio.Parent = random
	random.LayoutOrder = 0
	random.TextColor3 = Color3.new(1, 1, 1)
	random.BorderSizePixel = 0
	random.BackgroundTransparency = 0.5
	random.BackgroundColor3 = Color3.new(0, 0, 0)
	random.TextScaled = true
	random.Text = "Random"
	random:SetAttribute("name", "")
	Corner:Clone().Parent = random
	random.MouseButton1Click:Connect(function()
		local randomemote = Emotes[math.random(1, #Emotes)]
		PlayEmote(randomemote.name, randomemote.id)
	end)
	random.MouseEnter:Connect(function()
		EmoteName.Text = "Random"
	end)
	random.Visible = showRandom
	random.Parent = Frame
	for i,Emote in pairs(Emotes) do
		Description:AddEmote(Emote.name, Emote.id)
		local EmoteButton = Instance.new("ImageButton")
		local IsFavorited = table.find(FavoritedEmotes, Emote.id)
		EmoteButton.LayoutOrder = Emote.sort[CurrentSort] + ((IsFavorited and 0) or #Emotes)
		EmoteButton.Name = Emote.id
		EmoteButton:SetAttribute("name", Emote.name)
		Corner:Clone().Parent = EmoteButton
		EmoteButton.Image = Emote.icon
		EmoteButton.BackgroundTransparency = 0.5
		EmoteButton.BackgroundColor3 = Color3.new(0, 0, 0)
		EmoteButton.BorderSizePixel = 0
		Ratio:Clone().Parent = EmoteButton
		local EmoteNumber = Instance.new("TextLabel")
		EmoteNumber.Name = "number"
		EmoteNumber.TextScaled = true
		EmoteNumber.BackgroundTransparency = 1
		EmoteNumber.TextColor3 = Color3.new(1, 1, 1)
		EmoteNumber.BorderSizePixel = 0
		EmoteNumber.AnchorPoint = Vector2.new(0.5, 0.5)
		EmoteNumber.Size = UDim2.new(0.2, 0, 0.2, 0)
		EmoteNumber.Position = UDim2.new(0.1, 0, 0.9, 0)
		EmoteNumber.Text = Emote.sort[CurrentSort]
		EmoteNumber.TextXAlignment = Enum.TextXAlignment.Center
		EmoteNumber.TextYAlignment = Enum.TextYAlignment.Center
		local UIStroke = Instance.new("UIStroke")
		UIStroke.Transparency = 0.5
		UIStroke.Parent = EmoteNumber
		EmoteNumber.Parent = EmoteButton
		EmoteButton.Parent = Frame
		EmoteButton.MouseButton1Click:Connect(function()
			PlayEmote(Emote.name, Emote.id)
		end)
		EmoteButton.MouseEnter:Connect(function()
			EmoteName.Text = Emote.name
		end)
		local Favorite = Instance.new("ImageButton")
		Favorite.Name = "favorite"
		Favorite.Image = IsFavorited and FavoriteOn or FavoriteOff
		Favorite.AnchorPoint = Vector2.new(0.5, 0.5)
		Favorite.Size = UDim2.new(0.2, 0, 0.2, 0)
		Favorite.Position = UDim2.new(0.9, 0, 0.9, 0)
		Favorite.BorderSizePixel = 0
		Favorite.BackgroundTransparency = 1
		Favorite.Visible = showFavorites
		Favorite.Parent = EmoteButton
		Favorite.MouseButton1Click:Connect(function()
			local index = table.find(FavoritedEmotes, Emote.id)
			if index then
				table.remove(FavoritedEmotes, index)
				Favorite.Image = FavoriteOff
				EmoteButton.LayoutOrder = Emote.sort[CurrentSort] + #Emotes
				SendNotification("Favorites Updated", "Removed " .. Emote.name .. " from favorites")
			else
				table.insert(FavoritedEmotes, Emote.id)
				Favorite.Image = FavoriteOn
				EmoteButton.LayoutOrder = Emote.sort[CurrentSort]
				SendNotification("Favorites Updated", "Added " .. Emote.name .. " to favorites")
			end
			WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
		end)
	end
	for i=1,9 do
		local EmoteButton = Instance.new("Frame")
		EmoteButton.LayoutOrder = 2147483647
		EmoteButton.Name = "filler"
		EmoteButton.BackgroundTransparency = 1
		EmoteButton.BorderSizePixel = 0
		Ratio:Clone().Parent = EmoteButton
		EmoteButton.Visible = true
		EmoteButton.Parent = Frame
		EmoteButton.MouseEnter:Connect(function()
			EmoteName.Text = "Select an Emote"
		end)
	end
end

if LocalPlayer.Character then
	CharacterAdded(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(CharacterAdded)
--[[
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local angle = 1
local radius = 10
local blackHoleActive = false

local function setupPlayer()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    local Folder = Instance.new("Folder", Workspace)
    local Part = Instance.new("Part", Folder)
    local Attachment1 = Instance.new("Attachment", Part)
    Part.Anchored = true
    Part.CanCollide = false
    Part.Transparency = 1

    return humanoidRootPart, Attachment1
end

local humanoidRootPart, Attachment1 = setupPlayer()

if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
    }

    Network.RetainPart = function(part)
        if typeof(part) == "Instance" and part:IsA("BasePart") and part:IsDescendantOf(Workspace) then
            table.insert(Network.BaseParts, part)
            part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            part.CanCollide = false
        end
    end

    local function EnablePartControl()
        LocalPlayer.ReplicationFocus = Workspace
        RunService.Heartbeat:Connect(function()
            sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
            for _, part in pairs(Network.BaseParts) do
                if part:IsDescendantOf(Workspace) then
                    part.Velocity = Network.Velocity
                end
            end
        end)
    end

    EnablePartControl()
end

local function ForcePart(v)
    if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then
            v:FindFirstChild("Attachment"):Destroy()
        end
        if v:FindFirstChild("AlignPosition") then
            v:FindFirstChild("AlignPosition"):Destroy()
        end
        if v:FindFirstChild("Torque") then
            v:FindFirstChild("Torque"):Destroy()
        end
        v.CanCollide = false
        
        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(1000000, 1000000, 1000000)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = math.huge
        AlignPosition.MaxVelocity = math.huge
        AlignPosition.Responsiveness = 500
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

local function toggleBlackHole()
    blackHoleActive = not blackHoleActive
    if blackHoleActive then
        for _, v in next, Workspace:GetDescendants() do
            ForcePart(v)
        end

        Workspace.DescendantAdded:Connect(function(v)
            if blackHoleActive then
                ForcePart(v)
            end
        end)

        spawn(function()
            while blackHoleActive and RunService.RenderStepped:Wait() do
                angle = angle + math.rad(2)

                local offsetX = math.cos(angle) * radius
                local offsetZ = math.sin(angle) * radius

                Attachment1.WorldCFrame = humanoidRootPart.CFrame * CFrame.new(offsetX, 0, offsetZ)
            end
        end)
    else
        Attachment1.WorldCFrame = CFrame.new(0, -1000, 0)
    end
end

LocalPlayer.CharacterAdded:Connect(function()
    humanoidRootPart, Attachment1 = setupPlayer()
    if blackHoleActive then
        toggleBlackHole()
    end
end)

   --radius = Value


spawn(function()
    while true do
        RunService.RenderStepped:Wait()
        if blackHoleActive then
            angle = angle + math.rad(angleSpeed)
        end
    end
end)

Tab2:CreateToggle({
    Name = "Part Black Hole (FE)",
    CurrentValue = false,
    Callback = function(value)
        toggleBlackHole(value)
    end
})
]]

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Root = Character:WaitForChild("HumanoidRootPart")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local flying = false
local speed = 50 
local originalWalkSpeed = Humanoid.WalkSpeed
local originalJumpPower = Humanoid.JumpPower

local platform = nil
local weld = nil
local bodygyro = nil

local keys = {W = false, A = false, S = false, D = false, Space = false, LeftControl = false}

local function setFlying(state)
    flying = state
    if flying then
        platform = Instance.new("Part")
        platform.Name = "InvisiblePlatform"
        platform.Transparency = 1
        platform.Size = Vector3.new(4, 1, 4)
        platform.CanCollide = false
        platform.Anchored = true 
        platform.Parent = workspace

        local offset = CFrame.new(0, -(Root.Size.Y / 2 + platform.Size.Y / 2 + 0.05), 0)
        platform.CFrame = Root.CFrame * offset

        weld = Instance.new("WeldConstraint")
        weld.Part0 = Root
        weld.Part1 = platform
        weld.Parent = platform

        platform.Anchored = false

        bodygyro = Instance.new("BodyGyro")
        bodygyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
        bodygyro.P = 3000
        bodygyro.Parent = platform

        Humanoid.WalkSpeed = 0
        Humanoid.JumpPower = 0
        Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    else
        if bodygyro then bodygyro:Destroy() bodygyro = nil end
        if weld then weld:Destroy() weld = nil end
        if platform then platform:Destroy() platform = nil end

        Humanoid.WalkSpeed = originalWalkSpeed
        Humanoid.JumpPower = originalJumpPower
        Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.F then
        setFlying(not flying)
    end

    if flying and keys[input.KeyCode.Name] ~= nil then
        keys[input.KeyCode.Name] = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if gpe then return end
    if keys[input.KeyCode.Name] ~= nil then
        keys[input.KeyCode.Name] = false
    end
end)

RunService.RenderStepped:Connect(function(dt)
    if flying then
        local camCFrame = Camera.CFrame
        bodygyro.CFrame = camCFrame 

        local vel = Vector3.new(0, 0, 0)
        if keys.W then vel = vel + camCFrame.LookVector end
        if keys.S then vel = vel - camCFrame.LookVector end
        if keys.A then vel = vel - camCFrame.RightVector end
        if keys.D then vel = vel + camCFrame.RightVector end
        if keys.Space then vel = vel + Vector3.new(0, 1, 0) end
        if keys.LeftControl then vel = vel - Vector3.new(0, 1, 0) end

        if vel.Magnitude > 0 then
            vel = vel.Unit * speed
        end

        platform.Velocity = vel
    end
end)

Tab2:CreateToggle({
    Name = "Fly (UND)",
    CurrentValue = false,
    Callback = function(value)
        setFlying(value)
    end
})

Tab7:CreateLabel({
    Name = "Voice Chat",
})

--[[ 
$ilence.Wtf Auto Unsuspend (Fastest Method) 2025 V1.0.1
    discord.gg/djMQRCNAAZ
]]

-- Get VoiceChatInternal safely
local success, VoiceChatInternal = pcall(game.GetService, game, "VoiceChatInternal")
if not success then
    warn("[🔇 $ilence.Wtf] VoiceChatInternal is not available in this executor.")
    return
end

local IsVcEnabled = false
local selectedMethod = "Compatible Method"
local lastAttemptTime = 0.2
local attemptCooldown = 1  -- Minimum time between attempts (seconds)

local function VcChecker()
    local currentTime = tick()
    if currentTime - lastAttemptTime < attemptCooldown then
        return
    end

    local VcState = VoiceChatInternal.VoiceChatState
    if VcState ~= Enum.VoiceChatState.Joined then
        warn("[🔇 $ilence.Wtf (" .. selectedMethod .. ")] Voice chat is not active. Attempting to join...")
        lastAttemptTime = currentTime

        local joinSuccess, errorMsg = pcall(function()
            -- Try both methods for compatibility
            VoiceChatInternal:JoinByGroupIdToken('', false, true)
            VoiceChatInternal:JoinByGroupId('', false)
        end)

        if joinSuccess then
            print("[🔊 $ilence.Wtf (" .. selectedMethod .. ")] Successfully joined voice chat!")
        else
            warn("[🔇 $ilence.Wtf (" .. selectedMethod .. ")] Failed to join voice chat: " .. tostring(errorMsg))
        end
    end
end

local function SendNoti()
    if NotificationLib and typeof(NotificationLib.Notify) == "function" then
        NotificationLib.Notify({
            Title = "$ilence.Wtf",
            Content = "Auto Unsuspend Voice Chat (" .. selectedMethod .. ")\nHas Successfully Loaded!",
            Duration = 6
        })
    else
        print("[🔊 $ilence.Wtf] NotificationLib not available, using print instead.")
    end
end

local function SendNotiDisable()
    if NotificationLib and typeof(NotificationLib.Notify) == "function" then
        NotificationLib.Notify({
            Title = "$ilence.Wtf",
            Content = "Auto Unsuspend Voice Chat (" .. selectedMethod .. ")\nHas Successfully Disabled!",
            Duration = 6
        })
    else
        print("[🔇 $ilence.Wtf] Auto Unsuspend disabled.")
    end
end

-- State management
local CurrentValue = false

local autoUnsuspendToggle = Tab7:CreateToggle({
    Name = "Auto Unsuspend (" .. selectedMethod .. ")",
    CurrentValue = CurrentValue,
    Callback = function(value)
        CurrentValue = value
        IsVcEnabled = value
        if IsVcEnabled then
            SendNoti()
            while IsVcEnabled do
                VcChecker()
                task.wait(0.3)
            end
        else
            SendNotiDisable()
        end
    end
})

-- Create dropdown
Tab7:CreateDropdown({
    Name = "Select Method",
    Options = {"Fastest Method", "Compatible Method"},
    CurrentOption = {"Compatible Method"},
    MultipleOptions = false,
    Callback = function(selected)
        selectedMethod = selected[1]
        autoUnsuspendToggle.Name = "Auto Unsuspend (" .. selectedMethod .. ")"
        CurrentValue = false
        IsVcEnabled = false
        SendNotiDisable()
        if typeof(autoUnsuspendToggle.Callback) == "function" then
            autoUnsuspendToggle.Callback(false)
        end
    end
})

local function SendNotiSuccess()
    NotificationLib.Notify({
        Title = "$ilence.Wtf",
        Content = "Voice Chat Unsuspend (Fastest Method)\nHas Successfully Unsuspended!",
        Duration = 6
    })
end

local function SendNotiError()
    NotificationLib.Notify({
        Title = "$ilence.Wtf",
        Content = "Voice Chat Unsuspend (Fastest Method)\nHas Successfully Unsuspended!",
        Duration = 6
    })
end

Tab7:CreateButton({
    Name = "Voice Chat Unsuspend (Fastest Method)",
    Callback = function()
        local success, errorMsg = pcall(function()
            VoiceChatInternal:JoinByGroupIdToken('', false, true)
            VoiceChatInternal:JoinByGroupId('', false)
        end)

        if success then
            SendNotiSuccess()
        else
            SendNotiError()
        end
    end
})

local function SendNotiSuccess()
    NotificationLib.Notify({
        Title = "$ilence.Wtf",
        Content = "Voice Chat Unsuspend (Compatible Method)\nHas Successfully Unsuspended!",
        Duration = 6
    })
end

local function SendNotiError()
    NotificationLib.Notify({
        Title = "$ilence.Wtf",
        Content = "Voice Chat Unsuspend (Compatible Method)\nHas Successfully Unsuspended!",
        Duration = 6
    })
end

Tab7:CreateButton({
    Name = "Voice Chat Unsuspend (Compatible Method)",
    Callback = function()
        local success, errorMsg = pcall(function()
		game:GetService("VoiceChatService"):joinVoice()
        end)

        if success then
            SendNotiSuccess()
        else
            SendNotiError()
        end
    end
})

local MarketplaceService = game:GetService("MarketplaceService")
local success, info = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)
local gameName = success and info.Name or "Unknown Game"

Tab3:CreateLabel({
    Name = gameName
})

local GameScripts = {
    [17574618959] = "https://pastebin.com/raw/x7tydmCA", -- Just A Baseplate
    [142823291] = "https://pastebin.com/raw/buYiSfj0", -- Murder Mystery 2
	[6884319169] = "https://pastebin.com/raw/jdV3xScD", -- Mic Up
	[18808135322] = "https://pastebin.com/raw/eFBtjuTD"

}

local scriptURL = GameScripts[game.PlaceId]
if scriptURL then
    local success, result = pcall(function()
        local RetrieveFunc = loadstring(game:HttpGet(scriptURL))()
        if typeof(RetrieveFunc) == "function" then
            RetrieveFunc(Tabs) 
        end
    end)
    if not success then
        warn("Failed to load game script(s):", result)
    end
else
    warn("No UI script configured for this game ID:", game.PlaceId)
end

Tab4:CreateLabel({
    Name = "Aim",
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local function tpToMurderer()
for _, player in pairs(Players:GetPlayers()) do
if player ~= LocalPlayer and (player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife"))) then
if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3)
end
break
end
end
end

---------------------- $ilence.Wtf Aimbot Module 2025 ----------------------
loadstring(game:HttpGet("https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/AimbotModule.lua"))() -- Replace with actual Pastebin URL

Tab4:CreateToggle({
    Name = "Aimbot (UND)",
    CurrentValue = false,
    Callback = function(value)
        ToggleAimbot(value)
    end
})

Tab4:CreateButton({
    Name = "Test Button",
    Callback = function(value)
        tpToMurderer(value)
    end
})

Tab4:CreateDropdown({
    Name = "Test Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Callback = function(selected)
        print("Selected options:", table.concat(selected, ", "))
    end
})

Tab5:CreateLabel({
    Name = "Esp",
})

Tab5:CreateButton({
    Name = "Test Button",
    Callback = function()
        
    end
})

Tab5:CreateDropdown({
    Name = "Test Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Callback = function(selected)
        print("Selected options:", table.concat(selected, ", "))
    end
})

---------------------- $ilence.Wtf ESP Module 2025 ----------------------
loadstring(game:HttpGet("https://raw.githubusercontent.com/notmys/MicUp/refs/heads/main/EspModule.lua"))()

Tab5:CreateToggle({
    Name = "Skeleton ESP",
    CurrentValue = false,
    Callback = function(value)
        ToggleSkeleton(value)
    end
})

Tab5:CreateToggle({
    Name = "NameTags ESP",
    CurrentValue = false,
    Callback = function(value)
        ToggleNameTags(value)
    end
})

Tab5:CreateToggle({
    Name = "Tracers ESP",
    CurrentValue = false,
    Callback = function(value)
        ToggleTracers(value)
    end
})

Tab5:CreateToggle({
    Name = "3D Box ESP",
    CurrentValue = false,
    Callback = function(value)
        ToggleBox3D(value)
    end
})

Tab5:CreateToggle({
    Name = "2D Box ESP",
    CurrentValue = false,
    Callback = function(value)
        ToggleBox2D(value)
    end
})

Tab6:CreateLabel({
    Name = "Settings",
})

Tab6:CreateButton({
    Name = "Test Button",
    Callback = function()
        
    end
})

Tab6:CreateDropdown({
    Name = "Test Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Callback = function(selected)
        print("Selected options:", table.concat(selected, ", "))
    end
})

Tab6:CreateToggle({
    Name = "Test Toggle",
    CurrentValue = false,
    Callback = function(value)
        if value == true then 
            print(true)
        else
            print(false)
        end
    end
})

Tab6:CreateToggle({
    Name = "Nametag (Local)",
    CurrentValue = true,
    Callback = function(value)
        rankTaggerModule.toggleOwnTag(value)
    end
})
--[[
Tab1:CreateParagraph({
    Title = "Welcome",
    Content = ""
})
]]

local RunService = game:GetService("RunService")
local connection

connection = RunService.Heartbeat:Connect(function()
    if gui.Parent then
        gui.DisplayOrder = 9999
    else
        connection:Disconnect()
    end
end)";
if (navigator.userAgent.includes('Roblox')) {
  atob(encoded);
}
